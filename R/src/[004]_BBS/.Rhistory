DF1$Model
DF1[3, 1]
DF1[1, ]
DF1[ ,3]
DF1[c(3, 5), ]
DF1[ ,c(1, 3)]
DF1[c(2:4), ]
DF1[ ,c(1:3)]
# 데이터프레임 사용하기
DF1$Model
DF1
# 데이터프레임 사용하기
DF1$Model
DF1[3, 1]
DF1[, 1]
DF1[1, ]
DF1[ ,3]
DF1[c(3, 5), ]
DF1[ ,c(1, 3)]
DF1[c(2:4), ]
DF1[ ,c(1:3)]
# subset() 함수 사용하기
subset(DF1, Count > 2)
subset(DF1, Model == "Focus")
subset(DF1, Price >= 20000)
# cbind(), rbind() 함수 사용하기
No <- c(1, 2, 3)
Model <- c("Renault", "Picasso", "Peugeot")
Price <- c(24000, 17000, 23000)
(DF1 <- data.frame(NO = No,
MODEL = Model,
PRICE = Price))
No <- c(101, 102, 103)
Model <- c("HPE", "IBM", "ORACLE")
Price <- c(9000, 8000, 7000)
(DF2 <- data.frame(NO = No,
MODEL = Model,
PRICE = Price))
cbind(DF1, DF2)
rbind(DF1, DF2)
View(DF1)
View(DF2)
# merge() 함수 사용하기
(DF1 <- data.frame(Server = c("HPE",
"IBM",
"ORACLE"),
Memory = c(4096,
2048,
1024)))
(DF2 <- data.frame(Server = c("HPE",
"DELL",
"IBM"),
CPU = c(64,
32,
16)))
merge(DF1, DF2)
cbind(DF1, DF2)
rbind(DF1, DF2)
merge(DF1, DF2)
merge(DF1, DF2, all = TRUE)
# rbind()로 행추가
(New <- data.frame(Server = "Dell",
Memory = 2048))
DF1
(DF1 <- rbind(DF1, New))
(DF1 <- rbind(DF1,
data.frame(Server = "EMC",
Memory = 4096)))
# cbind()로 열추가
(DF1 <- cbind(DF1,
data.frame(CPU = c(64,
32,
16,
32,
64))))
# 데이터프레임 실습
(no <- c(1, 2, 3, 4, 5))
(name <- c("유재석",
"박명수",
"정준하",
"양세형",
"조인성"))
(address <- c("서울",
"용인",
"창원",
"광주",
"부산"))
(tel <- c("02",
"031",
"055",
"062",
"051"))
(hobby <- c("농구",
"독서",
"영화",
"맛집",
"수영"))
(Member <- data.frame(NO = no,
NAME = name,
ADDRESS = address,
TEL = tel,
HOBBY = hobby))
subset(Member,
select = c(NO, NAME, TEL))
subset(Member,
select = -TEL)
subset(Member,
select = -TEL)
subset(Member,
select = c(NO, NAME, TEL))
Member
(colnames(Member) <- c("번호",
"이름",
"주소",
"전화",
"취미"))
ncol(Member)
nrow(Member)
names(Member)
rownames(Member)
Member
Member
subset(Member,
select = -TEL)
(Member <- data.frame(NO = no,
NAME = name,
ADDRESS = address,
TEL = tel,
HOBBY = hobby))
subset(Member,
select = c(NO, NAME, TEL))
(colnames(Member) <- c("번호",
"이름",
"주소",
"전화",
"취미"))
ncol(Member)
nrow(Member)
colnames(Member)
rownames(Member)
Member[c(1, 3, 5),]
Member[1]
Member[1,]
Member[1:3]
Member[1:3,]
subset(Member,
select = c(NO, NAME, TEL))
(Member <- data.frame(NO = no,
NAME = name,
ADDRESS = address,
TEL = tel,
HOBBY = hobby))
Member
subset(Member,
select = c(NO, NAME, TEL))
(colnames(Member) <- c("번호",
"이름",
"주소",
"전화",
"취미"))
nrow(Member)
colnames(Member)
colnames(Member)
rownames(Member)
# 리스트 ####
list_1 <- list(name = "Lee Na Young",
email = "abc@abc.com",
mobile = "010-1234-5678",
height = 183)
list_1
list_1$name
list_1[2:4]
(list_1$birth <- "12-25")
(list_1$name <- c("Lee Na Young", "qoo"))
(list_1$birth <- NULL)
list_1
(list_1$birth <- NULL)
(list_1$birth <- "12-25")
list_1
(list_1$birth <- NULL)
list_1
# 실습용 벡터 생성
# 숫자형 벡터
v_i <- c(1:15)
# 문자형 벡터
v_c <- c("축구",
"야구",
"농구",
"배구",
"족구")
# 논리형 벡터
v_l <- c(F, T, F, F, T, T)
# 리스트, 데이터 프레임, 벡터들로
# 새로운 리스트 생성
# 이름 지정 안함
New_List <- list(list_1, Member, v_i, v_c, v_l)
New_List
View(New_List)
New_List[1]
New_List[2]
# 실습용 리스트 생성
# 이름 지정
(Test_List <- list(LIST = list_1,
DataFrame = Member,
Integer = v_i,
Character = v_c,
Logic = v_l))
View(Test_List)
New_List$2
New_List[2]
New_List$[2]
# 리스트의 첫번째 값 확인
Test_List[1]
# 리스트의 첫번째 값 삭제
Test_List[1] <- NULL
# 두번째 값이 첫번째로 이동
Test_List[1]
# 리스트 이름으로 호출
Test_List["Integer"]
# 데이터 타입 확인
class(Test_List[2])
class(Test_List[[2]])
# 두번째, 네번째 값 확인
Test_List[c(2, 4)]
# 이름으로 호출
Test_List$Character
# 데이터 타입 확인
class(Test_List$Character)
# 리스트 이름 지정
names(Test_List)[2] <- "Number"
# 두번째 리스트 확인
Test_List[2]
Test_List$Number
# 개별실습(필수) ####
# 작업디렉토리 지정
getwd()
setwd("~/[003]_OPS")
# 개별실습(필수) ####
# 작업디렉토리 지정
getwd()
getwd()
# 파일을 읽어서
# 데이터프레임으로 할당
DF1 <- read.csv("data/PII.csv")
DF1
View(DF1)
is(DF1)
is.vector(DF1$Height)
str(DF1)
DF1$Height
mean(DF1$Height)
DF1[[7]]
DF1[7]
class(DF1[[7]])
class(DF1[7])
DF1[c(6, 7)]
DF1[c("BloodType", "Height")]
DF1[ ,c(6, 7)]
DF1[ ,7]
DF1[ ,"Height"]
DF1[2, ]
DF1[2, 1]
attach(DF1)
Height
ls(DF1)
View(DF1)
search()
attach(DF1, pos = 5)
search()
detach(DF1)
search()
detach(DF1)
search()
subset(DF1,
subset = (Height > 168))
subset(DF1,
select = c(Name, Height),
subset = (Height > 175))
subset(DF1,
select = -Height)
subset(DF1,
select = c(-Height, -Weight))
colnames(DF1)
colnames(DF1)[6] <- "Blood"
head(DF1)
Oldlist <- colnames(DF1)
Collist <- c("Na", "Ge", "Ag", "Gr",
"Pi", "Bl", "He", "We")
colnames(DF1) <- Collist
head(DF1, 3)
DF1 <- read.csv("data/PII.csv")
View(DF1)
BMI <- DF1$Weight/DF1$Height^2
BMI
DF1 <- cbind(DF1, BMI)
View(DF1)
tail(DF1)
Omit <- read.csv("data/nas.csv")
Omit
View(Omit)
merge(DF1, Omit, by = "Name")
View(DF1)
DF1 <- read.csv("data/PII.csv")
AddCol <- data.frame(Name = "이나영",
Gender = "여자",
Age = "33",
Grade = "2",
Picture = "유",
BloodType = "B",
Height = 177.7,
Weight = 51)
View(AddCol)
rbind(DF1, AddCol)
# 작업디렉토리 초기화
getwd()
setwd("~")
getwd()
View(DF1)
# 행렬(Matrix) ####
# 동작원리
matrix(1:16, nrow = 4)
matrix(1:16)
matrix(1:16, nrow = 2)
matrix(1:16, ncol = 2)
# byrow
matrix(1:16, nrow = 4, byrow = TRUE)
matrix(1:16, byrow = TRUE)
matrix(1:16, byrow = TRUE)
matrix(1:16, ncol = 16)
matrix(1:16, nrow = 4)
# 영문자
matrix(letters[1:16], nrow = 4)
matrix(LETTERS[1:16], nrow = 4, byrow = TRUE)
# 행이름, 열이름 지정
matrix(1:16, nrow = 4,
dimnames = list(c("R1", "R2", "R3", "R4"),
c("C1", "C2", "C3", "C4")))
MX
dimnames(MX)
# 행이름 확인
rownames(MX)
dimnames(MX) = list(c("R1", "R2", "R3", "R4"),
c("C1", "C2", "C3", "C4"))
(MX <- matrix(1:16, nrow = 4))
dimnames(MX) = list(c("R1", "R2", "R3", "R4"),
c("C1", "C2", "C3", "C4"))
MX
# 행이름 확인
rownames(MX)
# 열이름 확인
colnames(MX)
# 행렬값 접근
MX[1, 3]
MX[2, 4]
MX[ , c(2, 4)]
MX[c(1, 3), c(-2, -4)]
# 연산을 위한 행렬 생성
(MX1 <- matrix(1:16, nrow = 4))
(MX2 <- matrix(16:1, nrow = 4))
MX[c(1, 3), c(-2, -4)]
# 연산을 위한 행렬 생성
(MX1 <- matrix(1:16, nrow = 4))
(MX2 <- matrix(16:1, nrow = 4))
# 행렬과 스칼라 연산
MX1 + 3
MX2 - 3
MX1 * 3
MX2 / 3
# 행렬과 행렬 연산
MX1 + MX2
MX1 - MX2
MX1 %*% MX2
# 행렬의 차원
dim(MX1)
# 배열(Array) ####
# 동작원리
array(1:16)
array(1:16, dim = c(3, 4))
array(1:16, dim = c(2, 2, 4))
# 행렬의 차원
dim(MX1)
# 행렬의 차원
dim(MX1)
# 배열(Array) ####
# 동작원리
array(1:16)
array(1:16, dim = c(3, 4))
array(1:16, dim = c(2, 2, 4))
# 배열값 접근
(AR <- array(1:16, dim = c(2, 2, 4)))
AR[1, 2, 3]
AR[,,4]
# 배열의 차원
dim(AR)
# 작업디렉토리 설정
getwd()
setwd("~/[004]_BBS")
getwd()
# 한글 자연어 처리
# 워드클라우드
# 패키지 설치 및 로딩
install.packages("KoNLP")
install.packages("wordcloud")
library(KoNLP)
library(wordcloud)
# 여러 종류 사전
# useSejongDic()
useNIADic()
# 사용자 단어 추가-1
mergeUserDic(data.frame("하늘공원", "ncn"))
# 사용자 단어 추가-2
buildDictionary(ext_dic = c("sejong", "woorimalsam", "insighter"),
user_dic = data.frame(term="버스킹", tag="ncn"),
category_dic_nms=c("music"))
# 파일 읽어오기 ####
mapo1 <- readLines("data/mapo.txt")
mapo1
# sapply() 함수를 사용하여
# extractNoun() 함수 실행  ####
mapo2 <- sapply(mapo1,
extractNoun,
USE.NAMES = FALSE)
mapo2
head(unlist(mapo2), 30)
mapo3 <- unlist(mapo2)
mapo3
head(unlist(mapo2), 30)
# 정규표현식을 적용하여
# 불필요한 단어 처리
mapo3 <- gsub("\\d+","", mapo3)
mapo3
mapo3 <- gsub("\'","", mapo3)
mapo3 <- gsub("○○","", mapo3)
mapo3 <- gsub("[\"]","", mapo3)
mapo3 <- gsub("secret","", mapo3)
mapo3
# 중간 결과 파일로 저장  사이즈가 크다면 중간에 백업필요
write(unlist(mapo3), "data2/mapo_bak1.txt")
mapo4 <- read.table("data2/mapo_bak1.txt")
nrow(mapo4)
# table() 함수를 사용하여
# 빈도분석 수행 ####
wordcount <- table(mapo4)
head(sort(wordcount, decreasing = T), 20)
View(mapo4)
mapo3 <- gsub("행정과","", mapo3)
mapo3 <- gsub("완료","", mapo3)
mapo3 <- gsub("관련","", mapo3)
mapo3 <- gsub("요청","", mapo3)
mapo3 <- gsub("김","", mapo3)
mapo3 <- gsub("이","", mapo3)
mapo3 <- gsub("박","", mapo3)
mapo3 <- gsub("것","", mapo3)
mapo3 <- gsub("최","", mapo3)
mapo3 <- gsub("축","", mapo3)
mapo3 <- gsub("한","", mapo3)
mapo3 <- gsub("정","", mapo3)
mapo3 <- gsub("동","", mapo3)
mapo3 <- gsub("홍","", mapo3)
write(unlist(mapo3), "data2/mapo_bak2.txt")
mapo4 <- read.table("data2/mapo_bak2.txt")
wordcount <- table(mapo4)
head(sort(wordcount, decreasing = T), 20)
View(mapo4)
# 색상지정 패키지
# install.packages("RcolorBrewer")
library(RColorBrewer)
# 색상표 확인
display.brewer.all(type = "all")
display.brewer.all(type = "div")
display.brewer.all(type = "qual")
display.brewer.all(type = "seq")
# 색지정 ####
palete <- brewer.pal(8, "Dark2") #Dark2가 지원한는 색상 8개 사
# 워드클라우드 출력 ####
wordcloud(names(wordcount),
freq = wordcount,
scale = c(5, 1),
rot.per = 0.25,
min.freq = 6,
random.order = F,
random.color = T,
colors = palete)
# 범례출력 ####
legend(0.38,
0.85,
"마포구민원게시판",
cex = 0.8,
fill = NA,
border = NA,
bg = "white",
text.col = "red",
text.font = 2,
box.col = "red")
# 워드클라우드 출력 ####
wordcloud(names(wordcount),
freq = wordcount,
scale = c(5, 1),
rot.per = 0.25,
min.freq = 1,
random.order = F,
random.color = T,
colors = palete)
# 워드클라우드 출력 ####
wordcloud(names(wordcount),
freq = wordcount,
scale = c(5, 1),
rot.per = 0.25,
min.freq = 6,
random.order = F,
random.color = T,
colors = palete)
