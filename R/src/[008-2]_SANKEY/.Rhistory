url <- paste(searchUrl, "?query=", query, "&display=100", sep="")
doc <- getURL(url,
httpheader = c('Content-Type' = "application/xml",
'X-Naver-Client-Id' = Client_ID,
'X-Naver-Client-Secret' = Client_Secret))
# 블로그 내용에 대한 리스트 만들기
doc2 <- htmlParse(doc, encoding="UTF-8")
text <- xpathSApply(doc2, "//item/description", xmlValue)
text
# 단어 추출
nouns <- sapply(text,
extractNoun,
USE.NAMES = F)
nouns
writeLines(text, "sample1.txt")
# html tag 제거 ####
(text <- gsub("^<*>$",
"",
text))
# html tag 제거 ####
(text <- gsub("^<*>$",
"",
text))
(txt <- gsub("<*>",
"",
txt))
(text <- gsub("<*>",
"",
text))
(text <- gsub("<?>",
"",
text))
doc <- getURL(url,
httpheader = c('Content-Type' = "application/xml",
'X-Naver-Client-Id' = Client_ID,
'X-Naver-Client-Secret' = Client_Secret))
# 블로그 내용에 대한 리스트 만들기
doc2 <- htmlParse(doc, encoding="UTF-8")
text <- xpathSApply(doc2, "//item/description", xmlValue)
text
(text <- gsub("<+[[:alpha:]]>+",
"",
text))
(text <- gsub("<+[[:punct:]][[:alpha:]]>+",
"",
text))
writeLines(text, "sample1.txt")
text2<-readLines("sample1.txt")
text2
# 단어 추출
nouns <- sapply(text2,
extractNoun,
USE.NAMES = F)
nouns
nouns <- unlist(nouns)
nouns
# 빈도수 ####
wordcount <- table(nouns)
wordcount
wordcloud2(wordcount,
shape = "star",
backgroundColor = "black")
# RMySQL 패키지 설치 및 호출
install.packages("RMySQL")
library(RMySQL)
#도커 ip   id pw
# DB 연결설정
con <- dbConnect(MySQL(),
user="root",
password="rootpwd",
host="192.168.99.100",
dbname="bigdata_db",
client.flag=CLIENT_MULTI_RESULTS)
# SQL구문 설정
sql <- "SELECT * from rclass_tb"
# 쿼리 요청
rows <- dbGetQuery(con, sql)
# 결과 확인
rows
library(RCurl)
library(XML)
library(KoNLP)
library(wordcloud2)
# 팔레트 지정
library(RColorBrewer)
Client_ID <- "QuXvRyP4NkIBzebrT_Hs"
Client_Secret <- "nuRjoOrM_H"
searchUrl <- "https://openapi.naver.com/v1/search/blog.xml"
query <- URLencode(iconv("4차산업","euc-kr","UTF-8"))
url <- paste(searchUrl, "?query=", query, "&display=100", sep="")
doc <- getURL(url,
httpheader = c('Content-Type' = "application/xml",
'X-Naver-Client-Id' = Client_ID,
'X-Naver-Client-Secret' = Client_Secret))
# 블로그 내용에 대한 리스트 만들기
doc2 <- htmlParse(doc, encoding="UTF-8")
text <- xpathSApply(doc2, "//item/description", xmlValue)
text
# html tag 제거 ####
(text <- gsub("^<*>$",
"",
text))
(text <- gsub("<+[[:alpha:]]>+",
"",
text))
(text <- gsub("<+[[:punct:]][[:alpha:]]>+",
"",
text))
writeLines(text, "sample1.txt")
text2<-readLines("sample1.txt")
text2
# 단어 추출
nouns <- sapply(text2,
extractNoun,
USE.NAMES = F)
nouns <- unlist(nouns)
# 빈도수 ####
wordcount <- table(nouns)
wordcloud2(wordcount,
shape = "star",
backgroundColor = "black")
# Oracle 패키지 설치 및 호출
install.packages("ora")
library(ora)
# Oracle 패키지 설치 및 호출
install.packages("ROracle")
library(ROracle)
# Oracle 패키지 설치 및 호출
install.packages("ora")
# 두개의 자료 비교 ####
# (고수준) + (저수준)
(TS1 <- c(round(runif(30) * 100)))  #정수 형태의 난수 30개 만들어 낸다 .
(TS2 <- c(round(runif(30) * 100)))
(TS1 <- sort(TS1, decreasing = FALSE))  #오름차순 정렬
(TS2 <- sort(TS2, decreasing = FALSE))
#두개의 변화량을 시각화
# (고수준)
plot(TS1,
type = "l")
# (저수준)
lines(TS2,
lty = "dashed",
col = "red")
# plot() 함수 옵션 ####
v1 <- seq(-10, 10, 1)
v2 <- v1 ^ 2
# 선, 점 지정 ####
plot(v1, v2, type = "p",
main = "Graph-1", sub = "점타입")
plot(v1, v2, type = "l",
main = "Graph-2", sub = "선타입")
# 선, 점 지정 ####
plot(v1, v2, type = "p",
main = "Graph-1", sub = "점타입")
plot(v1, v2, type = "l",
main = "Graph-2", sub = "선타입")
plot(v1, v2, type = "c",
main = "Graph-3", sub = "선 - 점")
plot(v1, v2, type = "b",
main = "Graph-4", sub = "선과 점")
plot(v1, v2, type = "o",
main = "Graph-5", sub = "선위에 점")
plot(v1, v2, type = "h",
main = "Graph-6", sub = "수직선")
plot(v1, v2, type = "s",
main = "Graph-7", sub = "계단형")
# 테두리 모양 ####
plot(v1, v2, type = "p", bty = "o")
plot(v1, v2, type = "p", bty = "7")
plot(v1, v2, type = "p", bty = "c")
plot(v1, v2, type = "p", bty = "u")
plot(v1, v2, type = "p", bty = "]")
# 색지정 ####
plot(v1, v2, type = "p", col = "blue")
plot(v1, v2, type = "p", bty = "l")
plot(v1, v2, type = "p", bty = "7")
plot(v1, v2, type = "p", bty = "c")
plot(v1, v2, type = "p", bty = "u")
plot(v1, v2, type = "p", bty = "]")
# 색지정 ####
plot(v1, v2, type = "p", col = "blue")
# 점모양 지정(0~25) ####
plot(v1, v2, type = "p", pch = 25)
plot(v1, v2, type = "p", pch = "$")
# 선모양 지정 ####
plot(v1, v2, type = "l", col = "red")
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 1)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 2)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 3)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 4)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 5)
# 점모양 지정(0~25) ####
plot(v1, v2, type = "p", pch = 25)
plot(v1, v2, type = "p", pch = 1)
plot(v1, v2, type = "p", pch = 3)
plot(v1, v2, type = "p", pch = "*")
plot(v1, v2, type = "l", col = "red", lwd = 4)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 1)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 2)
plot(v1, v2, type = "l", col = "red", lwd = 2)
plot(v1, v2, type = "l", col = "red", lwd = 4)
# pie() 그래프 출력 ####
#외부 패키지 필요   한가지 정보를 강하게 보이고 싶으면 pi chart
#pi chart 의 항목이 균등하면 => 막대 차트로 바꾸는게 더 좋다
#차트를 완성 한후 어떻게 전달할지가 스토리 텔링
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
library(graphics)
x <- c(9, 15, 20, 16)
label <- c("영업1팀",
"영업2팀",
"영업3팀",
"영업4팀")
pie(x,
labels = label,
main = "부서별 영업 실적")
#pi 그래프의 시작점  12시 방향
pie(x,
init.angle = 90,
labels = label,
main = "부서별 영업 실적")
pct <- round(x/sum(x) * 100)
label <- paste(label, pct)
label <- paste(label, "%", sep = " ")
pie(x,
init.angle = 90,
col = rainbow(length(x)),
labels = label,
main = "부서별 영업 실적")
# 3D 파일차트 ####
install.packages("plotrix")
library(plotrix)
pie3D(x,
labels = label,
explode = 0.1,
labelcex = 0.8,
main="부서별 영업 실적")
#x  y 축만 있슴
# 3D 그래프  교재에 없음
library(lattice)
#iris 내장 객체   붓꽃의 정보 R내장 데이터
colnames(iris)
cloud(Petal.Length~Sepal.Length +
Sepal.Width,
data = iris)
# plot3d()  다이나믹하게 처리
install.packages("rgl")
library(rgl)
# 왼쪽마우스 클릭 : 확대
# 오른쪽마우스 클릭 : 회전
plot3d(iris$Sepal.Length,
iris$Sepal.Width,
iris$Petal.Length,
xlab = "S.L",
ylab = "S.W",
zlab = "P.L",
Col = rainbow(2))
install.packages("ROracle")
install.packages("ROracle",type = "source")
library(ROracle)
install.packages("ROracle")
install.packages('devtools')
install.packages("devtools")
devtools::install_github("gmum/gmum.r", ref="master")
install.packages("ROracle")
library(ROracle)
# 필요 패키지 호출
library("ggplot2")
library("ggthemes")
library("scales")
# 작업 디덱토리 설정
getwd()
setwd("~/[008-1]_THEMES")
getwd()
# 데이터 읽어오기
DF <- read.csv("data/PII.csv")
#그래프 그리기 위해 Data 키와 몸무개의 관계
# 객체에 지정 ####
p1 <- ggplot(DF, aes(x = Height, y = Weight, colour = BloodType)) +
geom_point(size = 5) +
ggtitle("Slam Dunk 101")
# Economist theme ####
p1 + theme_economist() + scale_colour_economist() +
scale_y_continuous(position = "right")
# Solarized theme ####
p1 + theme_solarized() +
scale_colour_solarized("blue")
#값은 같은데 다른 형태로 시각화
# Solarized theme ####
p1 + theme_solarized() +
scale_colour_solarized("blue")
p1 + theme_solarized(light = FALSE) +
scale_colour_solarized("red")
p1 + theme_solarized_2(light = FALSE) +
scale_colour_solarized("blue")
# Stata theme ####
p1 + theme_stata() + scale_colour_stata()
# Excel 2003 theme ####
p1 + theme_excel() + scale_colour_excel()
ggplot(diamonds, aes(x = clarity, fill = cut)) +
geom_bar() +
scale_fill_excel() +
theme_excel()
# Pander Theme ####
p1 + theme_pander() + scale_colour_pander()
ggplot(diamonds, aes(x = clarity, fill = cut)) +
geom_bar() +
theme_pander() +
scale_fill_pander()
# Paul Tol Scales ####
p1 + geom_smooth(method = "lm", se = FALSE) +
scale_color_ptol() +
theme_minimal()
ggplot(diamonds, aes(x = clarity, fill = cut)) +
geom_bar() +
scale_fill_ptol() +
theme_minimal()
# Fivethirtyeight theme ####
p1 + geom_smooth(method = "lm", se = FALSE) +
theme_fivethirtyeight()
# Tableau Scales ####
p1 + theme_igray() + scale_colour_tableau()
p1 + theme_igray() + scale_colour_tableau("colorblind10")
# Inverse Gray Theme ####
p1 + theme_igray()
# Stephen Few's Practical Rules for Using Color ####
p1 + theme_few() + scale_colour_few()
# Wall Street Journal ####
p1 + theme_wsj() + scale_colour_wsj("colors6", "")
# Base and Par Themes ####
p1 + theme_base()
#데이터가 좀 필요해서 내장 diamonds 객체 사용
ggplot(diamonds, aes(x = clarity, fill = cut)) +
geom_bar() +
scale_fill_ptol() +
theme_minimal()
# Fivethirtyeight theme ####
p1 + geom_smooth(method = "lm", se = FALSE) +
theme_fivethirtyeight()
# etc ####
dtemp <- data.frame(months = factor(rep(substr(month.name,1,3), 4), levels = substr(month.name,1,3)),
city = rep(c("Tokyo", "New York", "Berlin", "London"), each = 12),
temp = c(7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6,
-0.2, 0.8, 5.7, 11.3, 17.0, 22.0, 24.8, 24.1, 20.1, 14.1, 8.6, 2.5,
-0.9, 0.6, 3.5, 8.4, 13.5, 17.0, 18.6, 17.9, 14.3, 9.0, 3.9, 1.0,
3.9, 4.2, 5.7, 8.5, 11.9, 15.2, 17.0, 16.6, 14.2, 10.3, 6.6, 4.8))
# etc ####
dtemp <- data.frame(months = factor(rep(substr(month.name,1,3), 4), levels = substr(month.name,1,3)),
city = rep(c("Tokyo", "New York", "Berlin", "London"), each = 12),
temp = c(7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6,
-0.2, 0.8, 5.7, 11.3, 17.0, 22.0, 24.8, 24.1, 20.1, 14.1, 8.6, 2.5,
-0.9, 0.6, 3.5, 8.4, 13.5, 17.0, 18.6, 17.9, 14.3, 9.0, 3.9, 1.0,
3.9, 4.2, 5.7, 8.5, 11.9, 15.2, 17.0, 16.6, 14.2, 10.3, 6.6, 4.8))
ggplot(dtemp, aes(x = months, y = temp, group = city, color = city)) +
geom_line() +
geom_point(size = 2) +
ggtitle("Monthly Average Temperature") +
theme_hc() +
scale_colour_hc()
install.packages("maps")
# Maps theme ####
library("maps")
us <- fortify(map_data("state"), region = "region")
ggplot() +
geom_map(data  =  us, map = us,
aes(x = long, y = lat, map_id = region, group = group),
fill = "skyblue", color = "black", size = 0.25) +
coord_map("albers", lat0 = 39, lat1 = 45) +
theme_map()
install.packages("mapproj")
library("mapproj")
ggplot() +
geom_map(data  =  us, map = us,
aes(x = long, y = lat, map_id = region, group = group),
fill = "skyblue", color = "black", size = 0.25) +
coord_map("albers", lat0 = 39, lat1 = 45) +
theme_map()
# 작업디렉토리 지정
getwd()
setwd("~/[008-2]_SANKEY")
getwd()
.libPaths()
# dplyr 패키지(전처리)
install.packages("dplyr")
library(dplyr)    #가장 강력한 전처리 도구이다.
# 1년 예산 불러오기
DF <- read.csv("data/expenditure.csv")
str(DF)
(DF2 <- DF)   # 한글 이름  영문으로
# "확정안" 변수의 이름과 단위(천원) 변경
(colnames(DF2)[6] <- "value")
(DF2["value"] <- round(DF2["value"]/1000))
(DF2 <- DF) #데이터 백업
colnames(DF2)
# "확정안" 변수의 이름과 단위(천원) 변경
(colnames(DF2)[6] <- "value")   #6번째 이름을 value로 바꾸기
(DF2["value"] <- round(DF2["value"]/1000))   #과감히 소수점 버리기   원 단위를 천원 단위로
(DF3 <- DF2)
# dplyr 패키지 사용
# 데이터 전처리  dplyr  패키지 사용
# 모든노드 1차원표현 및 합계 저장
sum1 <- DF3 %>%
group_by(소관명, 회계명) %>%
summarise(sum(value))
sum1
sum2 <- DF3 %>%
group_by(회계명, 분야명) %>%
summarise(sum(value))
sum2
sum4 <- DF3 %>%
group_by(부문명, 프로그램명) %>%
summarise(sum(value))
sum4
# 변수이름 영문으로 변경   결국 헤더 변경
colnames(sum1) <- c("source",
"target",
"value")
colnames(sum2) <- c("source",
"target",
"value")
colnames(sum3) <- c("source",
"target",
"value")
colnames(sum4) <- c("source",
"target",
"value")
sum1
sum2
sum3
sum3 <- DF3 %>%
group_by(분야명, 부문명) %>%
summarise(sum(value))
sum4 <- DF3 %>%
group_by(부문명, 프로그램명) %>%
summarise(sum(value))
# 변수이름 영문으로 변경   결국 헤더 변경
colnames(sum1) <- c("source",
"target",
"value")
colnames(sum2) <- c("source",
"target",
"value")
colnames(sum3) <- c("source",
"target",
"value")
colnames(sum4) <- c("source",
"target",
"value")
sum1
sum2
sum3
sum4
# as.data.frame으로 구조변경
sum1 <- as.data.frame(sum1)
sum2 <- as.data.frame(sum2)
sum3 <- as.data.frame(sum3)
sum4 <- as.data.frame(sum4)
# DF4로 합치기
(DF4 <- rbind(sum1, sum2, sum3, sum4))
# rCharte 패키지를 github로부터 설치
# install.packages("yaml")
# library(yaml)
install.packages("devtools")
library(devtools)
install_github("saurfang/rCharts", ref="utf8-writelines")
library(rCharts)
# rCharts 객체 생성
sankeyPlot <- rCharts$new()
# sankey 라이브러지 지정
sankeyPlot$setLib("libraries/sankey")
# sankey 라이브러지 지정
sankeyPlot$setLib("libraries/sankey")
sankeyPlot$setTemplate(script = "libraries/sankey/layouts/chart.html")
# 그래프 관련 정보 지정
sankeyPlot$set(
data = DF4,
nodeWidth = 15,
nodePadding = 13,
layout = 300,
width = 900,
height = 750,
units = "천원",
title = "Sankey Diagram"
)
# (예산)그래프 실행
sankeyPlot
# 002-영화배우 관객동원 수 ####
DF5 <- read.csv("data/movie.csv")
#데이터가 심플해서 전처리 없이 헤더만 영문으로 바꾸기
colnames(DF5) <- c("source", "target", "value")
colnames(DF5)
# rCharts 객체 생성
sankeyPlot <- rCharts$new()
# sankey 라이브러지 지정
sankeyPlot$setLib("libraries/sankey")
sankeyPlot$setTemplate(script = "libraries/sankey/layouts/chart.html")
# 그래프 정보 지정
sankeyPlot$set(
data = DF5,
nodeWidth = 15,
nodePadding = 13,
layout = 300,
width = 900,
height = 750,
units = "명",
title = "Sankey Diagram"
)
# (관객수)그래프 실행
sankeyPlot
