txt))
(text <- gsub("<*>",
"",
text))
(text <- gsub("<?>",
"",
text))
doc <- getURL(url,
httpheader = c('Content-Type' = "application/xml",
'X-Naver-Client-Id' = Client_ID,
'X-Naver-Client-Secret' = Client_Secret))
# 블로그 내용에 대한 리스트 만들기
doc2 <- htmlParse(doc, encoding="UTF-8")
text <- xpathSApply(doc2, "//item/description", xmlValue)
text
(text <- gsub("<+[[:alpha:]]>+",
"",
text))
(text <- gsub("<+[[:punct:]][[:alpha:]]>+",
"",
text))
writeLines(text, "sample1.txt")
text2<-readLines("sample1.txt")
text2
# 단어 추출
nouns <- sapply(text2,
extractNoun,
USE.NAMES = F)
nouns
nouns <- unlist(nouns)
nouns
# 빈도수 ####
wordcount <- table(nouns)
wordcount
wordcloud2(wordcount,
shape = "star",
backgroundColor = "black")
# RMySQL 패키지 설치 및 호출
install.packages("RMySQL")
library(RMySQL)
#도커 ip   id pw
# DB 연결설정
con <- dbConnect(MySQL(),
user="root",
password="rootpwd",
host="192.168.99.100",
dbname="bigdata_db",
client.flag=CLIENT_MULTI_RESULTS)
# SQL구문 설정
sql <- "SELECT * from rclass_tb"
# 쿼리 요청
rows <- dbGetQuery(con, sql)
# 결과 확인
rows
library(RCurl)
library(XML)
library(KoNLP)
library(wordcloud2)
# 팔레트 지정
library(RColorBrewer)
Client_ID <- "QuXvRyP4NkIBzebrT_Hs"
Client_Secret <- "nuRjoOrM_H"
searchUrl <- "https://openapi.naver.com/v1/search/blog.xml"
query <- URLencode(iconv("4차산업","euc-kr","UTF-8"))
url <- paste(searchUrl, "?query=", query, "&display=100", sep="")
doc <- getURL(url,
httpheader = c('Content-Type' = "application/xml",
'X-Naver-Client-Id' = Client_ID,
'X-Naver-Client-Secret' = Client_Secret))
# 블로그 내용에 대한 리스트 만들기
doc2 <- htmlParse(doc, encoding="UTF-8")
text <- xpathSApply(doc2, "//item/description", xmlValue)
text
# html tag 제거 ####
(text <- gsub("^<*>$",
"",
text))
(text <- gsub("<+[[:alpha:]]>+",
"",
text))
(text <- gsub("<+[[:punct:]][[:alpha:]]>+",
"",
text))
writeLines(text, "sample1.txt")
text2<-readLines("sample1.txt")
text2
# 단어 추출
nouns <- sapply(text2,
extractNoun,
USE.NAMES = F)
nouns <- unlist(nouns)
# 빈도수 ####
wordcount <- table(nouns)
wordcloud2(wordcount,
shape = "star",
backgroundColor = "black")
# Oracle 패키지 설치 및 호출
install.packages("ora")
library(ora)
# Oracle 패키지 설치 및 호출
install.packages("ROracle")
library(ROracle)
# Oracle 패키지 설치 및 호출
install.packages("ora")
# 두개의 자료 비교 ####
# (고수준) + (저수준)
(TS1 <- c(round(runif(30) * 100)))  #정수 형태의 난수 30개 만들어 낸다 .
(TS2 <- c(round(runif(30) * 100)))
(TS1 <- sort(TS1, decreasing = FALSE))  #오름차순 정렬
(TS2 <- sort(TS2, decreasing = FALSE))
#두개의 변화량을 시각화
# (고수준)
plot(TS1,
type = "l")
# (저수준)
lines(TS2,
lty = "dashed",
col = "red")
# plot() 함수 옵션 ####
v1 <- seq(-10, 10, 1)
v2 <- v1 ^ 2
# 선, 점 지정 ####
plot(v1, v2, type = "p",
main = "Graph-1", sub = "점타입")
plot(v1, v2, type = "l",
main = "Graph-2", sub = "선타입")
# 선, 점 지정 ####
plot(v1, v2, type = "p",
main = "Graph-1", sub = "점타입")
plot(v1, v2, type = "l",
main = "Graph-2", sub = "선타입")
plot(v1, v2, type = "c",
main = "Graph-3", sub = "선 - 점")
plot(v1, v2, type = "b",
main = "Graph-4", sub = "선과 점")
plot(v1, v2, type = "o",
main = "Graph-5", sub = "선위에 점")
plot(v1, v2, type = "h",
main = "Graph-6", sub = "수직선")
plot(v1, v2, type = "s",
main = "Graph-7", sub = "계단형")
# 테두리 모양 ####
plot(v1, v2, type = "p", bty = "o")
plot(v1, v2, type = "p", bty = "7")
plot(v1, v2, type = "p", bty = "c")
plot(v1, v2, type = "p", bty = "u")
plot(v1, v2, type = "p", bty = "]")
# 색지정 ####
plot(v1, v2, type = "p", col = "blue")
plot(v1, v2, type = "p", bty = "l")
plot(v1, v2, type = "p", bty = "7")
plot(v1, v2, type = "p", bty = "c")
plot(v1, v2, type = "p", bty = "u")
plot(v1, v2, type = "p", bty = "]")
# 색지정 ####
plot(v1, v2, type = "p", col = "blue")
# 점모양 지정(0~25) ####
plot(v1, v2, type = "p", pch = 25)
plot(v1, v2, type = "p", pch = "$")
# 선모양 지정 ####
plot(v1, v2, type = "l", col = "red")
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 1)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 2)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 3)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 4)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 5)
# 점모양 지정(0~25) ####
plot(v1, v2, type = "p", pch = 25)
plot(v1, v2, type = "p", pch = 1)
plot(v1, v2, type = "p", pch = 3)
plot(v1, v2, type = "p", pch = "*")
plot(v1, v2, type = "l", col = "red", lwd = 4)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 1)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 2)
plot(v1, v2, type = "l", col = "red", lwd = 2)
plot(v1, v2, type = "l", col = "red", lwd = 4)
# pie() 그래프 출력 ####
#외부 패키지 필요   한가지 정보를 강하게 보이고 싶으면 pi chart
#pi chart 의 항목이 균등하면 => 막대 차트로 바꾸는게 더 좋다
#차트를 완성 한후 어떻게 전달할지가 스토리 텔링
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
library(graphics)
x <- c(9, 15, 20, 16)
label <- c("영업1팀",
"영업2팀",
"영업3팀",
"영업4팀")
pie(x,
labels = label,
main = "부서별 영업 실적")
#pi 그래프의 시작점  12시 방향
pie(x,
init.angle = 90,
labels = label,
main = "부서별 영업 실적")
pct <- round(x/sum(x) * 100)
label <- paste(label, pct)
label <- paste(label, "%", sep = " ")
pie(x,
init.angle = 90,
col = rainbow(length(x)),
labels = label,
main = "부서별 영업 실적")
# 3D 파일차트 ####
install.packages("plotrix")
library(plotrix)
pie3D(x,
labels = label,
explode = 0.1,
labelcex = 0.8,
main="부서별 영업 실적")
#x  y 축만 있슴
# 3D 그래프  교재에 없음
library(lattice)
#iris 내장 객체   붓꽃의 정보 R내장 데이터
colnames(iris)
cloud(Petal.Length~Sepal.Length +
Sepal.Width,
data = iris)
# plot3d()  다이나믹하게 처리
install.packages("rgl")
library(rgl)
# 왼쪽마우스 클릭 : 확대
# 오른쪽마우스 클릭 : 회전
plot3d(iris$Sepal.Length,
iris$Sepal.Width,
iris$Petal.Length,
xlab = "S.L",
ylab = "S.W",
zlab = "P.L",
Col = rainbow(2))
# 작업디렉토리 지정
getwd()
setwd("~/[008]_GGPLOT2")
getwd()
# ggplot2 ####
install.packages("ggplot2")
install.packages("ggthemes")  #테마적용패키지
library(ggplot2)
library(ggthemes)
library(scales)
#내장 데이터 diamonds
diamonds
# 그래프 출력 ####
ggplot(data = diamonds,
aes(x = carat,
y = price,
colour = clarity)) +
geom_point() +
theme_wsj()
ggplot(data = diamonds,
aes(x = carat,
y = price,
colour = clarity)) +
geom_point() +
ggplot(data = diamonds,
aes(x = carat,
y = price,
colour = clarity)) +
geom_point()
ggplot(data = diamonds,
aes(x = carat,
y = price,
colour = clarity))
# 객체지정 ####
g1 <- ggplot(data = diamonds,
aes(x = carat,
y = price,
colour = clarity))
# 객체지정
g2 <- geom_point()
# 객체지정
g3 <- theme_wsj()
# 그래프 출력
g1 + g2 + g3
g1 + g2
# 테마변경
g1 + g2 + theme_bw()
# 포인트 출력
g1 + geom_point()
# 라인 출력
g1 + geom_line()
# 포인트 + 라인 출력
g1 + geom_line() + geom_point()
# 사이즈 지정 ####
g1 +
geom_line(size = 1) +
geom_point(size = 5)
# 그래프 출력 ####
ggplot(data = diamonds,
aes(x = carat,
y = price,
colour = clarity)) +
geom_point() +
theme_wsj()
# geom_point() and geom_line() ####
DF <- read.csv("data/PII.csv")
#
# DF 학생 17명 데이터
# geom_point() and geom_line() ####
DF <- read.csv("data/PII.csv")
# 객체지정
g1 <- ggplot(DF, aes(x = Height,
y = Weight,
colour = BloodType))
# 포인트 출력
g1 + geom_point()
# 라인 출력
g1 + geom_line()
# 포인트 + 라인 출력     레이어 개념이 들어가므로 가능
g1 + geom_line() + geom_point()
# 사이즈 지정 ####
g1 +
geom_line(size = 1) +
geom_point(size = 5)
g1 + geom_point(size=7)
g1 + geom_line(size=1)
# 사이즈 지정 ####
g1 +
geom_line(size = 1) +
geom_point(size = 5)
# geom_line() 내에서 aes() 재지정 가능
# ggplot()의 aes() 값도 상속받음
# aes 추가 가능
g1 +
geom_line(aes(colour = Gender),
size = 1) +
geom_point(size = 5)
# x축 기준
g1 +
geom_line(size = 1) +
geom_point(size = 5) +
facet_grid(.~Gender)
# y축 기준
g1 +
geom_line(size = 1) +
geom_point(size = 5) +
facet_grid(Gender~.)
# scales = "free"를 적용하여
# 명목변수 별 각각의 스케일을 허용
g1 +
geom_line(size = 1) +
geom_point(size = 5) +
facet_grid(Gender~., scales = "free")
# geom_bar() ####
ggplot(DF, aes(x = BloodType)) +
geom_bar()
#color  fill  구분 사용
# fill로 색지정
ggplot(DF, aes(x = BloodType, fill = Gender)) +
geom_bar()
# 성별 막대그래프 분리
ggplot(DF, aes(x = BloodType, fill = Gender)) +
geom_bar(position = "dodge")
# 막대그래프는 높이만 의미가 있다.
# 막대그래프 폭 지정
ggplot(DF, aes(x = BloodType, fill = Gender)) +
geom_bar(position = "dodge", width = 0.3)
# geon_histogram() ####
# 객체지정
g1 <- ggplot(diamonds, aes(x = carat))
# 그래프 출력
g1 +
geom_histogram(binwidth = 0.1,
fill = "darkgreen")
# color 명목형 변수별 출력
g1 +
geom_histogram(binwidth = 0.1,
fill = "darkgreen") +
facet_grid(color~.)
# color 명목형 변수별 출력
g1 +
geom_histogram(binwidth = 0.1,
fill = "darkgreen") +
facet_grid(color~.)
# 출력값 scale 조정
g1 +
geom_histogram(binwidth = 0.1,
fill = "darkgreen") +
facet_grid(color~., scales = "free")
# alpha(투명도) 적용
g1 +
geom_histogram(aes(fill = color),
binwidth = 0.1,
alpha = 0.5)
# geom_point()-산점도 그리기 ####
DF <- read.csv("data/PII.csv")
g1 <- ggplot(DF,
aes(x = Weight, y = Height))
g1 + geom_point()
# 명목형 변수의 Level별 색상지정
g1 +
geom_point(aes(colour = Gender), size = 5)
g1 + geom_point(size=5)
# 점모양 변경
g1 +
geom_point(aes(colour = Gender, shape = Gender),
size = 5)
g1 +
geom_point(aes(colour = Gender,
shape = BloodType),
size = 5)
# 점모양 변경
g1 +
geom_point(aes(colour = Gender, shape = Gender),
size = 5)
# 연속형 변수로 색상지정
g1 +
geom_point(aes(colour = Height,
shape = BloodType),
size = 5)
# 연속형 변수로 사이즈 지정
g1 +
geom_point(aes(size = Height,
shape = Gender),
colour = "red")
# 연속형 변수로 색상지정
g1 +
geom_point(aes(colour = Height,
shape = BloodType),
size = 5)
# 연속형 변수로 사이즈 지정
g1 +
geom_point(aes(size = Height,
shape = Gender),
colour = "red")
# alpha(투명도) 지정
g1 +
geom_point(aes(colour = Gender,
shape = BloodType),
size = 5,
alpha = 0.5)
# 휘귀선 그리기
g1 +
geom_point(aes(colour = Gender), size = 5) +
geom_smooth(method = "lm")
# 이름 표시하기
g1 +
geom_point(aes(colour = Gender), size = 5) +
geom_text(aes(label = Name))
g1 +
geom_point(aes(colour = Gender), size = 5) +
geom_text(aes(label = Name),
vjust = -1.1,
colour = "gray35")
# 이름 표시하기   geom_text
g1 +
geom_point(aes(colour = Gender), size = 5) +
geom_text(aes(label = Name))
g1 +
geom_point(aes(colour = Gender), size = 5) +
geom_text(aes(label = Name),
vjust = -1.1,
colour = "gray35")
#시간의 흐름을 가지고 자료 처리  오류가 날 수 있다. ?
# 001-[시계열데이터라인] ####
# 2014/2015년도 매출정보
TS <- read.csv("data/ts.csv")
TS
# 모든값이 출력되지 않는 문제 발생
ggplot(TS, aes(x = Date, y = Sales)) +
geom_line()
# factor()를 사용하여 요인값으로 변경
ggplot(TS, aes(x = factor(Date),
y = Sales,
group = 1)) +
geom_line()
# factor()를 사용하여 요인값으로 변경
ggplot(TS, aes(x = factor(Date),
y = Sales,
group = 1)) +
geom_line()
# 점추가
ggplot(TS, aes(x = factor(Date),
y = Sales,
group = 1)) +
geom_line() +
geom_point()
# 테마적용
ggplot(TS, aes(x = factor(Date),
y = Sales,
group = 1)) +
geom_line() +
geom_point() +
theme_light()
# 색상지정
ggplot(TS, aes(x = factor(Date),
y = Sales,
group = 1)) +
geom_line(colour = "orange1",
size = 1) +
geom_point(colour = "orangered2",
size = 4) +
theme_light()
# x축, y축 이름지정
ggplot(TS, aes(x = factor(Date),
y = Sales,
group = 1)) +
geom_line(colour = "orange1",
size = 1) +
geom_point(colour = "orangered2",
size = 4) +
xlab("년도") +
ylab("매출") +
ggtitle("월별매출") +
theme_light() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggtitle("월별매출") +
