"",
text))
writeLines(text, "sample1.txt")
text2<-readLines("sample1.txt")
text2
# 단어 추출
nouns <- sapply(text2,
extractNoun,
USE.NAMES = F)
nouns <- unlist(nouns)
# 빈도수 ####
wordcount <- table(nouns)
wordcloud2(wordcount,
shape = "star",
backgroundColor = "black")
# Oracle 패키지 설치 및 호출
install.packages("ora")
library(ora)
# Oracle 패키지 설치 및 호출
install.packages("ROracle")
library(ROracle)
# Oracle 패키지 설치 및 호출
install.packages("ora")
# 두개의 자료 비교 ####
# (고수준) + (저수준)
(TS1 <- c(round(runif(30) * 100)))  #정수 형태의 난수 30개 만들어 낸다 .
(TS2 <- c(round(runif(30) * 100)))
(TS1 <- sort(TS1, decreasing = FALSE))  #오름차순 정렬
(TS2 <- sort(TS2, decreasing = FALSE))
#두개의 변화량을 시각화
# (고수준)
plot(TS1,
type = "l")
# (저수준)
lines(TS2,
lty = "dashed",
col = "red")
# plot() 함수 옵션 ####
v1 <- seq(-10, 10, 1)
v2 <- v1 ^ 2
# 선, 점 지정 ####
plot(v1, v2, type = "p",
main = "Graph-1", sub = "점타입")
plot(v1, v2, type = "l",
main = "Graph-2", sub = "선타입")
# 선, 점 지정 ####
plot(v1, v2, type = "p",
main = "Graph-1", sub = "점타입")
plot(v1, v2, type = "l",
main = "Graph-2", sub = "선타입")
plot(v1, v2, type = "c",
main = "Graph-3", sub = "선 - 점")
plot(v1, v2, type = "b",
main = "Graph-4", sub = "선과 점")
plot(v1, v2, type = "o",
main = "Graph-5", sub = "선위에 점")
plot(v1, v2, type = "h",
main = "Graph-6", sub = "수직선")
plot(v1, v2, type = "s",
main = "Graph-7", sub = "계단형")
# 테두리 모양 ####
plot(v1, v2, type = "p", bty = "o")
plot(v1, v2, type = "p", bty = "7")
plot(v1, v2, type = "p", bty = "c")
plot(v1, v2, type = "p", bty = "u")
plot(v1, v2, type = "p", bty = "]")
# 색지정 ####
plot(v1, v2, type = "p", col = "blue")
plot(v1, v2, type = "p", bty = "l")
plot(v1, v2, type = "p", bty = "7")
plot(v1, v2, type = "p", bty = "c")
plot(v1, v2, type = "p", bty = "u")
plot(v1, v2, type = "p", bty = "]")
# 색지정 ####
plot(v1, v2, type = "p", col = "blue")
# 점모양 지정(0~25) ####
plot(v1, v2, type = "p", pch = 25)
plot(v1, v2, type = "p", pch = "$")
# 선모양 지정 ####
plot(v1, v2, type = "l", col = "red")
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 1)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 2)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 3)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 4)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 5)
# 점모양 지정(0~25) ####
plot(v1, v2, type = "p", pch = 25)
plot(v1, v2, type = "p", pch = 1)
plot(v1, v2, type = "p", pch = 3)
plot(v1, v2, type = "p", pch = "*")
plot(v1, v2, type = "l", col = "red", lwd = 4)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 1)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 2)
plot(v1, v2, type = "l", col = "red", lwd = 2)
plot(v1, v2, type = "l", col = "red", lwd = 4)
# pie() 그래프 출력 ####
#외부 패키지 필요   한가지 정보를 강하게 보이고 싶으면 pi chart
#pi chart 의 항목이 균등하면 => 막대 차트로 바꾸는게 더 좋다
#차트를 완성 한후 어떻게 전달할지가 스토리 텔링
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
library(graphics)
x <- c(9, 15, 20, 16)
label <- c("영업1팀",
"영업2팀",
"영업3팀",
"영업4팀")
pie(x,
labels = label,
main = "부서별 영업 실적")
#pi 그래프의 시작점  12시 방향
pie(x,
init.angle = 90,
labels = label,
main = "부서별 영업 실적")
pct <- round(x/sum(x) * 100)
label <- paste(label, pct)
label <- paste(label, "%", sep = " ")
pie(x,
init.angle = 90,
col = rainbow(length(x)),
labels = label,
main = "부서별 영업 실적")
# 3D 파일차트 ####
install.packages("plotrix")
library(plotrix)
pie3D(x,
labels = label,
explode = 0.1,
labelcex = 0.8,
main="부서별 영업 실적")
#x  y 축만 있슴
# 3D 그래프  교재에 없음
library(lattice)
#iris 내장 객체   붓꽃의 정보 R내장 데이터
colnames(iris)
cloud(Petal.Length~Sepal.Length +
Sepal.Width,
data = iris)
# plot3d()  다이나믹하게 처리
install.packages("rgl")
library(rgl)
# 왼쪽마우스 클릭 : 확대
# 오른쪽마우스 클릭 : 회전
plot3d(iris$Sepal.Length,
iris$Sepal.Width,
iris$Petal.Length,
xlab = "S.L",
ylab = "S.W",
zlab = "P.L",
Col = rainbow(2))
install.packages("ROracle")
install.packages("ROracle",type = "source")
library(ROracle)
install.packages("ROracle")
install.packages('devtools')
install.packages("devtools")
devtools::install_github("gmum/gmum.r", ref="master")
install.packages("ROracle")
library(ROracle)
# 작업디렉토리 지정 ####
getwd()
setwd("~/[101]_ETC")
getwd()
# install.packages("dplyr")
library(dplyr)
# Data read
DF1 <- read.csv("data/PII.csv")
head(DF1)
# Filter() 함수 ####
# 조건을 주어 필터링
filter(DF1, Height > 170)
filter(DF1, Grade %in% c("2", "4"))
filter(DF1, Height > 170 & Weight > 70)  # 키가 170 이사잉면서 몸무게도 70 이상
filter(DF1, Grade %in% c("2", "4"))    # 학년니 2 4 학년인 데이터만 추출
# select() 함수 ####
# 데이터셋에서 특정 컬럼만 선택
select(DF1, Name, Age, BloodType)
select(DF1, Name, Age, BloodType) %>% head()  # select(DF1, Name, Age, BloodType) 결과를 head() 함수에 넘긴다.   %>%
select(DF1, -Grade, -Picture, - Height) %>% tail()
select(DF1, Name:Grade) %>% tail(7) %>% head(5)
select(DF1, Name:Grade)
select(DF1, Name:Grade) %>% tail(7) %>% head(5)
# 여러문장을 조합 %>% ####
DF1 %>%
select(Name, BloodType, Height, Weight) %>%
filter(Height > 175)
# arrange() 함수 ####
# 데이터를 오름차순 또는 내림차순 정렬
DF1 %>%
select(Name, BloodType, Height, Weight) %>%
filter(Height > 175) %>%
arrange(Weight)
# dplyr 패키지사용하니 간단
# select 컬럼 기준으로 뽑아내고  filter는 레코드 단위로 뽑아낸다 .
# 여러문장을 조합 %>% ####
DF1 %>%
select(Name, BloodType, Height, Weight) %>%
filter(Height > 175)
# arrange() 함수 ####
# 데이터를 오름차순 또는 내림차순 정렬
DF1 %>%
select(Name, BloodType, Height, Weight) %>%
filter(Height > 175) %>%
arrange(Weight)
DF1 %>%
select(Name, BloodType, Height, Weight) %>%
filter(Height > 175) %>%
arrange(desc(Weight))
# mutate() 함수  없던 컬럼이 생성된다.
# mutate() 함수 ####
# 기존의 객체를 사용하여 새로운 객체 생성
DF1 %>%
select(Name, Height, Weight) %>%
mutate("BMI" = round(Weight/(Height/100)^2))
DF1
# mutate() 함수  없던 컬럼이 생성된다.
# mutate() 함수 ####
# 기존의 객체를 사용하여 새로운 객체 생성
DF1 %>%
select(Name, Height, Weight) %>%
mutate("BMI" = round(Weight/(Height/100)^2))
DF1 %>%
select(Name, Height, Weight) %>%
mutate("BMI" = round(Weight/(Height/100)^2)) %>%
arrange(BMI)
# 주석처리
# summarise(), group_by() ####
# 주어진 데이터를 집계(min, max, mean, count)
DF1 %>%
group_by(Gender) %>%
summarise(average = mean(Height, na.rm = TRUE))
#평균키     결측 na 없에고 계산
koo <- c(100,222,333,222,3,,55)
mean(koo)
mean(koo,na.rm = TRUE)
#평균키     결측 na 없에고 계산
koo <- c(100,222,333,222,3,,55)
#평균키     결측 na 없에고 계산
koo <- c(100,222,333,222,3,na,55)
#평균키     결측 na 없에고 계산
koo <- c(100,222,333,222,3,NA,55)
mean(koo,na.rm = TRUE)
DF1 %>%
group_by(Grade) %>%
summarise_each(funs(mean), Height, Weight)
# 주석처리
# summarise(), group_by() ####
# summarise(), group_by() 함수를 이용하여 주어진 데이터를 집계(min, max, mean, count)
DF1 %>%
group_by(Gender) %>%
summarise(average = mean(Height, na.rm = TRUE))
DF1 %>%
group_by(Grade) %>%
summarise_each(funs(mean), Height, Weight)
DF1 %>%
group_by(Grade) %>%
summarise_at(vars(Height, Weight), funs(mean),
na.rm = TRUE)
DF1 %>%
group_by(Grade) %>%
summarise_at(vars(Height, Weight), funs(mean, n()))
DF1 %>%
group_by(Grade) %>%
summarise_at(vars(Height, Weight), funs(mean),
na.rm = TRUE)
DF1 %>%
group_by(Grade) %>%
summarise_at(vars(Height, Weight), funs(mean, n()))
DF1 %>%
group_by(Grade) %>%
summarise_at(vars(Height, Weight), funs(mean, n()))
DF1 %>%
group_by(Grade) %>%
summarise_at(vars(Height, Weight), funs(mean, n))
DF1 %>%
group_by(Grade) %>%
summarise_at(vars(Height, Weight), funs(mean, n()))
DF1 %>%
group_by(Gender, Grade) %>%
summarise(average = mean(Height, na.rm = TRUE))
# 조건문(흐름제어) ####
n <- 3
# 조건문(흐름제어) ####
n <- 3
# Type1
if(n == 3){
print("n은 3입니다")
} else {
print("n은 3이 아닙니다")
}
# Type2
ifelse(n == 3, "n은 3.", "n은 5.")
# Type2   삼항연산자
ifelse(n == 3, "n은 3.", "n은 5.")
n <- 5
# Type1
if(n == 3){
print("n은 3입니다")
} else {
print("n은 3이 아닙니다")
}
# Type2
ifelse(n == 3, "n은 3.", "n은 5.")
# 반복문(반복수행) ####
# for()
for(num in 1:10){
print(num)
}
for(num in c(1,3,9)){
print(num)
}
for(num in 3:7){
print(num * num)
}
# while()
koo <- 1
while(koo < 10){
print(koo)
koo <- koo + 1
}
koo <- koo + 1
# repeat()
koo <- 1
repeat{
print(koo)
if(koo == 9){ break }
koo <- koo +1
}
# 데이터프레임에 적용
DF1 <- data.frame(aa = c("A", "B", "C", "D"),
bb = 1:4)
DF1
for(num in 1:4){
DF1[num, "new_column"] = num * 2
}
DF1
# 반복문 + 조건문 ####
# 데이터프레임에 적용
DF2 = data.frame( aa = c("A", "B", "C", "D"),
bb = 1:4)
DF2
for(n in 1:4){
if(n >= 3){
print(DF2[n, "bb"])
} else {
print("???")
}
}
DF1 %>%
group_by(Grade) %>%
summarise_at(vars(Height, Weight), funs(mean, n()))
DF1 %>%
group_by(Grade) %>%
summarise_each(funs(mean), Height, Weight)
DF1 %>%
group_by(Grade) %>%
summarise_each(funs(mean), Height, Weight)
# 주석처리
# summarise(), group_by() ####
# summarise(), group_by() 함수를 이용하여 주어진 데이터를 집계(min, max, mean, count)
DF1 %>%
group_by(Gender) %>%
summarise(average = mean(Height, na.rm = TRUE))
DF1
# mutate() 함수  없던 컬럼이 생성된다.
# mutate() 함수 ####
# 기존의 객체를 사용하여 새로운 객체 생성
DF1 %>%
select(Name, Height, Weight) %>%
mutate("BMI" = round(Weight/(Height/100)^2))
# install.packages("dplyr")
library(dplyr)
# Data read
DF1 <- read.csv("data/PII.csv")
DF1
# mutate() 함수  없던 컬럼이 생성된다.
# mutate() 함수 ####
# 기존의 객체를 사용하여 새로운 객체 생성
DF1 %>%
select(Name, Height, Weight) %>%
mutate("BMI" = round(Weight/(Height/100)^2))
DF1 %>%
group_by(Grade) %>%
summarise_at(vars(Height, Weight), funs(mean),
na.rm = TRUE)
DF1 %>%
group_by(Grade) %>%
summarise_at(vars(Height, Weight), funs(mean, n()))
DF1 %>%
group_by(Grade) %>%
summarise_at(vars(Height, Weight), funs(mean, n))
DF1 %>%
group_by(Grade) %>%
summarise_at(vars(Height, Weight), funs(mean, n()))
DF1 %>%
group_by(Grade) %>%
summarise_at(vars(Height, Weight), funs(mean, dplyr::n))
()
DF1 %>%
group_by(Grade) %>%
summarise_at(vars(Height, Weight), funs(mean, n()))
# 사용자 지정함수 ####
# 함수[특정 기능 반복 사용]
# 인수 없는 함수선언
myfunc1 <- function() {
x <- 11
y <- 22
return(x + y)
}
myfunc1()
# 인수 있는 함수선언
myfunc2 <- function(x, y) {
XX <- x
YY <- y
return(sum(XX, YY))
}
myfunc2(11, 22)
# 함수에서 함수 호출
myfunc3 <- function(x, y) {
x3 <- x+1
y3 <- y+1
x4 <- myfunc2(x3, y3)
return(x4)
}
myfunc3(10, 21)
# 함수 실행결과를 객체에 할당
myfunc4 <- function() {
x <- 11
y <- 22
return(invisible(x + y))
}
myfunc4()
result <- myfunc4()
result
# 함수 외부변수 호출하여 사용
x <- 9
x
ls()
myfunc5 <- function() {
x <<- 11
y <- 22
return(x + y)
}
x
myfunc5()
x
ls()
# 함수를 파일로 저장후 마치 lib처럼 사용 =>   매번 정의 안하는 방법
# 새로운 함수 선언
newfunc1 <- function(x) {
return(x * x)
}
newfunc1(3)
# 함수를 파일로 저장
getwd()
save(newfunc1, file = "myfunc.Rdata")
dir()
ls()
# 메모리에서 함수 삭제(에러발생)
rm("newfunc1")
ls()
newfunc1(3)
# 파일로부터 지정된 함수 읽어들이기
load("myfunc.Rdata")
newfunc1(3)
# 여러개의 함수 파일에 저장하기
newfunc2 <- function(x) {
return(x + x)
}
newfunc2(3)
save(newfunc1, newfunc2, file = "myfunc.Rdata")
newfunc1(3)
newfunc2(3)
# 최종 Test
rm("newfunc1")
rm("newfunc2")
newfunc1(3)
newfunc2(3)
load("myfunc.Rdata")
newfunc1(3)
newfunc2(3)
View(newfunc1)
View(newfunc2)
#File IO 확장
# R 내장 데이터셋 사용하기 ####
# datasets
library(help = "datasets")
data("CO2")
CO2
head(CO2, n = 10)
tail(CO2, n = 10)
Names(CO2)
str(CO2)
dim(CO2)
summary(CO2)
summary(CO2$conc)
# 알파벳
letters
LETTERS
letters[1:4]
letters[2:5]
# 데이터 분석 연습용  오른쪽  속성   url 주소 복사한다
# URL로 부터 데이터 읽어오기 ####
# website data
# https://vincentarelbundock.github.io/Rdatasets/datasets.html
url <- "https://vincentarelbundock.github.io/Rdatasets/csv/Stat2Data/ThreeCars.csv"
cars <- read.csv(url)
cars
