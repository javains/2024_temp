str(DF1)
DF1$Height
mean(DF1$Height)
DF1[[7]]
DF1[7]
class(DF1[[7]])
class(DF1[7])
DF1[c(6, 7)]
DF1[c("BloodType", "Height")]
DF1[ ,c(6, 7)]
DF1[ ,7]
DF1[ ,"Height"]
DF1[2, ]
DF1[2, 1]
attach(DF1)
Height
ls(DF1)
View(DF1)
search()
attach(DF1, pos = 5)
search()
detach(DF1)
search()
detach(DF1)
search()
subset(DF1,
subset = (Height > 168))
subset(DF1,
select = c(Name, Height),
subset = (Height > 175))
subset(DF1,
select = -Height)
subset(DF1,
select = c(-Height, -Weight))
colnames(DF1)
colnames(DF1)[6] <- "Blood"
head(DF1)
Oldlist <- colnames(DF1)
Collist <- c("Na", "Ge", "Ag", "Gr",
"Pi", "Bl", "He", "We")
colnames(DF1) <- Collist
head(DF1, 3)
DF1 <- read.csv("data/PII.csv")
View(DF1)
BMI <- DF1$Weight/DF1$Height^2
BMI
DF1 <- cbind(DF1, BMI)
View(DF1)
tail(DF1)
Omit <- read.csv("data/nas.csv")
Omit
View(Omit)
merge(DF1, Omit, by = "Name")
View(DF1)
DF1 <- read.csv("data/PII.csv")
AddCol <- data.frame(Name = "이나영",
Gender = "여자",
Age = "33",
Grade = "2",
Picture = "유",
BloodType = "B",
Height = 177.7,
Weight = 51)
View(AddCol)
rbind(DF1, AddCol)
# 작업디렉토리 초기화
getwd()
setwd("~")
getwd()
View(DF1)
# 행렬(Matrix) ####
# 동작원리
matrix(1:16, nrow = 4)
matrix(1:16)
matrix(1:16, nrow = 2)
matrix(1:16, ncol = 2)
# byrow
matrix(1:16, nrow = 4, byrow = TRUE)
matrix(1:16, byrow = TRUE)
matrix(1:16, byrow = TRUE)
matrix(1:16, ncol = 16)
matrix(1:16, nrow = 4)
# 영문자
matrix(letters[1:16], nrow = 4)
matrix(LETTERS[1:16], nrow = 4, byrow = TRUE)
# 행이름, 열이름 지정
matrix(1:16, nrow = 4,
dimnames = list(c("R1", "R2", "R3", "R4"),
c("C1", "C2", "C3", "C4")))
MX
dimnames(MX)
# 행이름 확인
rownames(MX)
dimnames(MX) = list(c("R1", "R2", "R3", "R4"),
c("C1", "C2", "C3", "C4"))
(MX <- matrix(1:16, nrow = 4))
dimnames(MX) = list(c("R1", "R2", "R3", "R4"),
c("C1", "C2", "C3", "C4"))
MX
# 행이름 확인
rownames(MX)
# 열이름 확인
colnames(MX)
# 행렬값 접근
MX[1, 3]
MX[2, 4]
MX[ , c(2, 4)]
MX[c(1, 3), c(-2, -4)]
# 연산을 위한 행렬 생성
(MX1 <- matrix(1:16, nrow = 4))
(MX2 <- matrix(16:1, nrow = 4))
MX[c(1, 3), c(-2, -4)]
# 연산을 위한 행렬 생성
(MX1 <- matrix(1:16, nrow = 4))
(MX2 <- matrix(16:1, nrow = 4))
# 행렬과 스칼라 연산
MX1 + 3
MX2 - 3
MX1 * 3
MX2 / 3
# 행렬과 행렬 연산
MX1 + MX2
MX1 - MX2
MX1 %*% MX2
# 행렬의 차원
dim(MX1)
# 배열(Array) ####
# 동작원리
array(1:16)
array(1:16, dim = c(3, 4))
array(1:16, dim = c(2, 2, 4))
# 행렬의 차원
dim(MX1)
# 행렬의 차원
dim(MX1)
# 배열(Array) ####
# 동작원리
array(1:16)
array(1:16, dim = c(3, 4))
array(1:16, dim = c(2, 2, 4))
# 배열값 접근
(AR <- array(1:16, dim = c(2, 2, 4)))
AR[1, 2, 3]
AR[,,4]
# 배열의 차원
dim(AR)
# 작업디렉토리 설정
getwd()
setwd("~/[004]_BBS")
getwd()
library(KoNLP)
library(wordcloud)
# 파일 읽어오기 ####
mapo1 <- readLines("data/mapo.txt")
mapo1
class(mapo1)
# sapply() 함수를 사용하여
# extractNoun() 함수 실행 명사 단어 뽑아내기  ####
mapo2 <- sapply(mapo1,
extractNoun,
USE.NAMES = FALSE)
View(mapo2)
mapo2  #단어로 쪼개진것이 확인
class(mapo2)
head(unlist(mapo2), 30)
mapo3 <- unlist(mapo2)   #벡터로 쪼개
mapo3 <- unlist(mapo2)   #벡터로 쪼개
mapo3
class(mapo3)
mapo3
# 정규표현식을 적용하여
# 불필요한 단어 처리
mapo3 <- gsub("\\d+","", mapo3) #숫자를 없애기
mapo3
mapo3 <- gsub("\'","", mapo3)
mapo3
mapo3 <- gsub("[\"]","", mapo3)
mapo3
mapo3 <- gsub("○○","", mapo3)
mapo3
mapo3 <- gsub("secret","", mapo3)
mapo3
# 중간 결과 파일로 저장  사이즈가 크다면 중간에 백업필요
write(unlist(mapo3), "data2/mapo_bak1.txt")
mapo4 <- read.table("data2/mapo_bak1.txt")
mapo4
class(mapo4)
unlist(mapo3)
View(mapo4)
nrow(mapo4)
mapo4
nrow(mapo4)
# table() 함수를 사용하여
# 빈도분석 수행 ####
wordcount <- table(mapo4)
class(wordcount)
wordcount
head(sort(wordcount, decreasing = T), 20)  #단어별 빈도수 확인
mapo3
mapo3 <- gsub("행정과","", mapo3)
mapo3
mapo3 <- gsub("완료","", mapo3)
mapo3 <- gsub("요청","", mapo3)
mapo3 <- gsub("김","", mapo3)
mapo3 <- gsub("이","", mapo3)
mapo3 <- gsub("박","", mapo3)
mapo3 <- gsub("것","", mapo3)
mapo3 <- gsub("최","", mapo3)
mapo3 <- gsub("축","", mapo3)
mapo3 <- gsub("한","", mapo3)
mapo3 <- gsub("정","", mapo3)
mapo3 <- gsub("동","", mapo3)
mapo3 <- gsub("홍","", mapo3)
mapo3
write(unlist(mapo3), "data2/mapo_bak2.txt")
mapo4 <- read.table("data2/mapo_bak2.txt")
mapo4
class(mapo4)
wordcount <- table(mapo4)
wordcount
head(sort(wordcount, decreasing = T), 20)
# 색상지정 패키지
# install.packages("RcolorBrewer")
library(RColorBrewer)
# 색상표 확인
display.brewer.all(type = "all")
display.brewer.all(type = "div")
display.brewer.all(type = "qual")
display.brewer.all(type = "seq")
# 색지정 ####
palete <- brewer.pal(8, "Dark2") #Dark2가 지원한는 색상 8개 사용
# 워드클라우드 출력 ####
wordcloud(names(wordcount),
freq = wordcount,
scale = c(5, 1),
rot.per = 0.25,
min.freq = 6,
random.order = F,
random.color = T,
colors = palete)
# 워드클라우드 출력 ####
wordcloud(names(wordcount),
freq = wordcount,
scale = c(5, 1),
rot.per = 0.50,
min.freq = 6,
random.order = F,
random.color = T,
colors = palete)
# 워드클라우드 출력 ####
wordcloud(names(wordcount),
freq = wordcount,
scale = c(5, 1),
rot.per = 0.70,
min.freq = 6,
random.order = F,
random.color = T,
colors = palete)
# 워드클라우드 출력 ####
wordcloud(names(wordcount),
freq = wordcount,
scale = c(5, 1),
rot.per = 0.23,
min.freq = 6,
random.order = F,
random.color = T,
colors = palete)
# 워드클라우드 출력 ####
wordcloud(names(wordcount),
freq = wordcount,
scale = c(5, 1),
rot.per = 0.25,
min.freq = 6,
random.order = F,
random.color = T,
colors = palete)
View(mapo2)
View(mapo4)
View(mapo4)
View(mapo2)
mapo2  #단어로 쪼개진것이 확인
View(mapo2)
mapo3
View(mapo2)
View(mapo4)
tail(mapo1,10)
extractNoun("자바 프로그래밍 실습 예제 ")
mapo2  #단어로 쪼개진것이 확인
mapo3
mapo3
head(sort(wordcount, decreasing = T), 20)  #단어별 빈도수 확인
palete
palete[3]
class(palete)
# 작업디렉토리 설정
getwd()
setwd("~/[004-1]_WC")
getwd()
# 대통령기록관 사이트에서 자료 다운로드
# http://pa.go.kr/index.jsp
# 파일에서 읽어오기
txt <- readLines("data/noh.txt")
txt
# 단어 추출
nouns <- sapply(txt,
extractNoun,
USE.NAMES = F)
nouns
head(unlist(nouns), 30)
# 두글자 이상 단어만 추출 ,제거가 아니라 , 필요한것만 뽑아낸다.
nouns <- Filter(function(x) {nchar(x) >= 2},
unlist(nouns))
nouns
head(unlist(nouns), 30)
# 벡터로 재지정
nouns <- unlist(nouns)
length(nouns)
# 빈도수
wordcount <- table(nouns)
head(sort(wordcount, decreasing = T), 30)
# 팔레트 지정
library(RColorBrewer)
palete <- brewer.pal(8, "Dark2")
# 결과 출력
wordcloud(names(wordcount),
freq = wordcount,
scale = c(5, 0.5),
rot.per = 0.25,
min.freq = 1,
random.order = F,
random.color = T,
colors = palete)
class(txt)
# 대통령기록관 사이트에서 자료 다운로드
# http://pa.go.kr/index.jsp
# 파일에서 읽어오기
txt <- readLines("data/noh.txt")
txt
class(txt)
class(nouns)
head(unlist(nouns), 30)
# 단어 추출
nouns <- sapply(txt,
extractNoun,
USE.NAMES = F)
nouns
class(nouns) #vector
# 두글자 이상 단어만 추출 ,제거가 아니라 , 필요한것만 뽑아낸다.
#gsub(제거) , filter(뽑아내기 )  함수 비교
nouns <- Filter(function(x) {nchar(x) >= 2},
unlist(nouns))
head(unlist(nouns), 30)
length(nouns)
# 두글자 이상 단어만 추출 ,제거가 아니라 , 필요한것만 뽑아낸다.
#gsub(제거) , filter(뽑아내기 )  함수 비교
nouns <- Filter(function(x) {nchar(x) >= 2},
unlist(nouns))
length(nouns)
# 두글자 이상 단어만 추출 ,제거가 아니라 , 필요한것만 뽑아낸다.
#gsub(제거) , filter(뽑아내기 )  함수 비교
nouns <- Filter(function(x) {nchar(x) >= 2},
unlist(nouns))
# 벡터로 재지정
nouns <- unlist(nouns)
length(nouns)
# 빈도수
wordcount <- table(nouns)
wordcount
class(wordcount)
head(sort(wordcount, decreasing = T), 30)
wordcount[2]
wordcount[12]
wordcount
wordcount[220]
# 결과 출력
wordcloud(names(wordcount),
freq = wordcount,
scale = c(5, 0.5),
rot.per = 0.25,
min.freq = 1,
random.order = F,
random.color = T,
colors = palete)
# 002-[오라클 로그분석]  size 3m ####
# install.packages("wordcloud")
# install.packages("RColorBrewer")
# library(wordcloud)
#오라클 로그 고유번호 추출
#readLines url 도 읽어온다
alert <- readLines("data/oracle.log")
alert
# 로그 메시지 공백을 "_"으로 변경  , 공백은 읽기 어렵다
alert <- gsub(" ", "_", alert)
alert
class(alert)
head(unlist(alert), 20)
# 필터링을 위해 unlist 작업 수행
alert <- unlist(alert)
class(alert)
# 필터링을 위해 unlist 작업 수행
alert <- unlist(alert)
# 5글자 이상만 필터링
alert <- Filter(function(x) {nchar(x) >= 5},
alert)
# 5글자 이상만 필터링
alert <- Filter(function(x) {nchar(x) >= 5},
alert)
# 정규표현식을 통하여 패턴매칭
#대문자로 ORA로 시작하는 애들을 뽑아낸다. value = T 문자뽑아내려고 지정
alert <- grep("^ORA-+", alert, value = T)
alert
# 에러코드 숫자만 잘라내기 뽑아내기
alert <- substr(alert, 5, 9)
alert
#어떤 에러가 몇번 발생 했는지 알수 있다.
head(unlist(alert), 20)
alert <- unlist(alert)
length(alert)
# 반복되는 에러별로 집계하여 errorcount에 저장
errorcount <- table(alert)
head(sort(errorcount, decreasing = T), 20)
palete <- brewer.pal(8, "Dark2")
wordcloud(names(errorcount),
freq = errorcount,
scale = c(10, 2),
rot.per = 0.25,
min.freq = 10,
random.order = F,
random.color = T,
colors = palete)
wordcloud(names(errorcount),
freq = errorcount,
scale = c(10, 2),
rot.per = 0.25,
min.freq = 10,
random.order = F,
random.color = T,
colors = palete)
wordcloud(names(errorcount),
freq = errorcount,
scale = c(10, 2),
rot.per = 0.25,
min.freq = 10,
random.order = F,
random.color = T,
colors = palete)
# wordcloud TEST ####
# library(wordcloud)
wordcloud(c(letters, LETTERS, 0:9),
seq(1, 1000, len = 62))
# library(RColorBrewer)
palete <- brewer.pal(9, "Set1")
wordcloud(c(letters, LETTERS, 0:9),
seq(1, 1000, len = 62),
colors = palete)
# 정규표현식 실습데이터    make vector
retxt <- c("Sports", "SPORTS",
"sports", "sPORTS",
"Baseball1", "sports",
"baseball2")
retxt
# 정규표현식 예제 ####
grep("sports", retxt)
grep("sports", retxt, value = TRUE)
grep("sports", retxt, value = TRUE)
grep("^s+", retxt, value = TRUE)
grep("^S+", retxt, value = TRUE)
grep("TS$", retxt, value = TRUE)
grep("[0-9]$", retxt, value = TRUE)
grep("[0-9]$", retxt, value = TRUE)
grep("[Ba]", retxt, value = TRUE)
grep("[0-9]", retxt, value = TRUE)
grep("[2-9]", retxt, value = TRUE)
grep("[[:digit:]]", retxt, value = TRUE)
grep("[[:digit:]]", retxt, value = TRUE)
grep("[[:upper:]]", retxt, value = TRUE)
grep("[[:lower:]]", retxt, value = TRUE)
grep("\\d", retxt, value = TRUE)
grep("\\d", retxt, value = TRUE)
grep("\d", retxt, value = TRUE)
grep("\\d", retxt, value = TRUE)
# 문자열 길이 확인 ####
nchar(retxt)
# 한글에 적용 ####
gregexpr(pattern = "[ㄱ-ㅎ]",
text = "ㅅ1서Jㅓㅂ9브Kㅡ")
gregexpr(pattern = "[ㅏ-ㅣ]",
text = "ㅅ1서Jㅓㅂ9브Kㅡ")
gregexpr(pattern = "[가-힣]",
text = "ㅅ1서Jㅓㅂ9브Kㅡ")
# 문자열 연결 ####
a <- "Baseball"
b <- "players"
paste(a,b)
paste("Lee", "Na", "Young")
paste("Lee", "Na", "Young",
sep=" ")
paste("Lee", "Na", "Young",
sep="/")
paste("Lee", "Na", "Young",
sep=" *** ")
paste("Lee", "Na", "Young",
sep=":")
# 특정 부분 골라내기 ####
substr(a, 5, 5)
substr(a, 5, 8)
# 특정 구분자 기준으로 분리 ####
strsplit("2017/06/16",
split = "/")
c <- paste(a, b)
c
strsplit(c, split = "\\s")
