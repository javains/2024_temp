# 적용대상 데이터 추가
aggregate(cbind(Height,Weight)~BloodType, DF, mean)
# plyr 패키지 ####
#ply r
library(plyr)
# 혈액형별 정렬(데이터프레임 -> 데이터프레임)
ddply(DF, "BloodType")
# dl  =>  데이터프레임 -> 리스트  , input output
dlply(DF, "BloodType")
# 함수 적용하기
# 단일함수
ddply(DF, "BloodType", nrow)
# 함수 여러개 적용하기
ddply(DF, "BloodType", c("nrow", "ncol"))
# 산술연산 적용
ddply(DF, "BloodType", summarise, heightMean=mean(Height)*2)
# summarise() 함수 사용하기(heightMean은 summarise의 인자)
ddply(DF, "BloodType", summarise, heightMean=mean(Height))
# 함수 여러개 적용하기
ddply(DF, "BloodType", c("nrow", "ncol"))
# summarise() 함수 사용하기(heightMean은 summarise의 인자)
ddply(DF, "BloodType", summarise, heightMean=mean(Height))
# 산술연산 적용
ddply(DF, "BloodType", summarise, heightMean=mean(Height)*2)
# 리스트형식 다중그룹
ddply(DF, .(BloodType), summarise, heightMean=mean(Height))
ddply(DF, .(BloodType, Gender), summarise, heightMean=mean(Height))
ddply(DF, .(BloodType, Gender), summarise, height_Mean=mean(Height))
ddply(DF, .(BloodType, Gender), summarise, height_Mean=avg(Height))
# 작업디렉토리 복원
getwd()
setwd("~")
getwd()
library(RCurl)
library(XML)
library(KoNLP)
library("wordcloud2")
library(wordcloud2)
# 팔레트 지정
library(RColorBrewer)
Client_ID <- "QuXvRyP4NkIBzebrT_Hs"
Client_Secret <- "nuRjoOrM_H"
searchUrl <- "https://openapi.naver.com/v1/search/blog.xml"
query <- URLencode(iconv("4차산업","euc-kr","UTF-8"))
url <- paste(searchUrl, "?query=", query, "&display=100", sep="")
doc <- getURL(url,
httpheader = c('Content-Type' = "application/xml",
'X-Naver-Client-Id' = Client_ID,
'X-Naver-Client-Secret' = Client_Secret))
# 블로그 내용에 대한 리스트 만들기
doc2 <- htmlParse(doc, encoding="UTF-8")
text <- xpathSApply(doc2, "//item/description", xmlValue)
text
# 단어 추출
nouns <- sapply(text,
extractNoun,
USE.NAMES = F)
nouns
writeLines(text, "sample1.txt")
# html tag 제거 ####
(text <- gsub("^<*>$",
"",
text))
# html tag 제거 ####
(text <- gsub("^<*>$",
"",
text))
(txt <- gsub("<*>",
"",
txt))
(text <- gsub("<*>",
"",
text))
(text <- gsub("<?>",
"",
text))
doc <- getURL(url,
httpheader = c('Content-Type' = "application/xml",
'X-Naver-Client-Id' = Client_ID,
'X-Naver-Client-Secret' = Client_Secret))
# 블로그 내용에 대한 리스트 만들기
doc2 <- htmlParse(doc, encoding="UTF-8")
text <- xpathSApply(doc2, "//item/description", xmlValue)
text
(text <- gsub("<+[[:alpha:]]>+",
"",
text))
(text <- gsub("<+[[:punct:]][[:alpha:]]>+",
"",
text))
writeLines(text, "sample1.txt")
text2<-readLines("sample1.txt")
text2
# 단어 추출
nouns <- sapply(text2,
extractNoun,
USE.NAMES = F)
nouns
nouns <- unlist(nouns)
nouns
# 빈도수 ####
wordcount <- table(nouns)
wordcount
wordcloud2(wordcount,
shape = "star",
backgroundColor = "black")
# RMySQL 패키지 설치 및 호출
install.packages("RMySQL")
library(RMySQL)
#도커 ip   id pw
# DB 연결설정
con <- dbConnect(MySQL(),
user="root",
password="rootpwd",
host="192.168.99.100",
dbname="bigdata_db",
client.flag=CLIENT_MULTI_RESULTS)
# SQL구문 설정
sql <- "SELECT * from rclass_tb"
# 쿼리 요청
rows <- dbGetQuery(con, sql)
# 결과 확인
rows
library(RCurl)
library(XML)
library(KoNLP)
library(wordcloud2)
# 팔레트 지정
library(RColorBrewer)
Client_ID <- "QuXvRyP4NkIBzebrT_Hs"
Client_Secret <- "nuRjoOrM_H"
searchUrl <- "https://openapi.naver.com/v1/search/blog.xml"
query <- URLencode(iconv("4차산업","euc-kr","UTF-8"))
url <- paste(searchUrl, "?query=", query, "&display=100", sep="")
doc <- getURL(url,
httpheader = c('Content-Type' = "application/xml",
'X-Naver-Client-Id' = Client_ID,
'X-Naver-Client-Secret' = Client_Secret))
# 블로그 내용에 대한 리스트 만들기
doc2 <- htmlParse(doc, encoding="UTF-8")
text <- xpathSApply(doc2, "//item/description", xmlValue)
text
# html tag 제거 ####
(text <- gsub("^<*>$",
"",
text))
(text <- gsub("<+[[:alpha:]]>+",
"",
text))
(text <- gsub("<+[[:punct:]][[:alpha:]]>+",
"",
text))
writeLines(text, "sample1.txt")
text2<-readLines("sample1.txt")
text2
# 단어 추출
nouns <- sapply(text2,
extractNoun,
USE.NAMES = F)
nouns <- unlist(nouns)
# 빈도수 ####
wordcount <- table(nouns)
wordcloud2(wordcount,
shape = "star",
backgroundColor = "black")
# Oracle 패키지 설치 및 호출
install.packages("ora")
library(ora)
# Oracle 패키지 설치 및 호출
install.packages("ROracle")
library(ROracle)
# Oracle 패키지 설치 및 호출
install.packages("ora")
# 두개의 자료 비교 ####
# (고수준) + (저수준)
(TS1 <- c(round(runif(30) * 100)))  #정수 형태의 난수 30개 만들어 낸다 .
(TS2 <- c(round(runif(30) * 100)))
(TS1 <- sort(TS1, decreasing = FALSE))  #오름차순 정렬
(TS2 <- sort(TS2, decreasing = FALSE))
#두개의 변화량을 시각화
# (고수준)
plot(TS1,
type = "l")
# (저수준)
lines(TS2,
lty = "dashed",
col = "red")
# plot() 함수 옵션 ####
v1 <- seq(-10, 10, 1)
v2 <- v1 ^ 2
# 선, 점 지정 ####
plot(v1, v2, type = "p",
main = "Graph-1", sub = "점타입")
plot(v1, v2, type = "l",
main = "Graph-2", sub = "선타입")
# 선, 점 지정 ####
plot(v1, v2, type = "p",
main = "Graph-1", sub = "점타입")
plot(v1, v2, type = "l",
main = "Graph-2", sub = "선타입")
plot(v1, v2, type = "c",
main = "Graph-3", sub = "선 - 점")
plot(v1, v2, type = "b",
main = "Graph-4", sub = "선과 점")
plot(v1, v2, type = "o",
main = "Graph-5", sub = "선위에 점")
plot(v1, v2, type = "h",
main = "Graph-6", sub = "수직선")
plot(v1, v2, type = "s",
main = "Graph-7", sub = "계단형")
# 테두리 모양 ####
plot(v1, v2, type = "p", bty = "o")
plot(v1, v2, type = "p", bty = "7")
plot(v1, v2, type = "p", bty = "c")
plot(v1, v2, type = "p", bty = "u")
plot(v1, v2, type = "p", bty = "]")
# 색지정 ####
plot(v1, v2, type = "p", col = "blue")
plot(v1, v2, type = "p", bty = "l")
plot(v1, v2, type = "p", bty = "7")
plot(v1, v2, type = "p", bty = "c")
plot(v1, v2, type = "p", bty = "u")
plot(v1, v2, type = "p", bty = "]")
# 색지정 ####
plot(v1, v2, type = "p", col = "blue")
# 점모양 지정(0~25) ####
plot(v1, v2, type = "p", pch = 25)
plot(v1, v2, type = "p", pch = "$")
# 선모양 지정 ####
plot(v1, v2, type = "l", col = "red")
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 1)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 2)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 3)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 4)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 5)
# 점모양 지정(0~25) ####
plot(v1, v2, type = "p", pch = 25)
plot(v1, v2, type = "p", pch = 1)
plot(v1, v2, type = "p", pch = 3)
plot(v1, v2, type = "p", pch = "*")
plot(v1, v2, type = "l", col = "red", lwd = 4)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 1)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 2)
plot(v1, v2, type = "l", col = "red", lwd = 2)
plot(v1, v2, type = "l", col = "red", lwd = 4)
# pie() 그래프 출력 ####
#외부 패키지 필요   한가지 정보를 강하게 보이고 싶으면 pi chart
#pi chart 의 항목이 균등하면 => 막대 차트로 바꾸는게 더 좋다
#차트를 완성 한후 어떻게 전달할지가 스토리 텔링
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
library(graphics)
x <- c(9, 15, 20, 16)
label <- c("영업1팀",
"영업2팀",
"영업3팀",
"영업4팀")
pie(x,
labels = label,
main = "부서별 영업 실적")
#pi 그래프의 시작점  12시 방향
pie(x,
init.angle = 90,
labels = label,
main = "부서별 영업 실적")
pct <- round(x/sum(x) * 100)
label <- paste(label, pct)
label <- paste(label, "%", sep = " ")
pie(x,
init.angle = 90,
col = rainbow(length(x)),
labels = label,
main = "부서별 영업 실적")
# 3D 파일차트 ####
install.packages("plotrix")
library(plotrix)
pie3D(x,
labels = label,
explode = 0.1,
labelcex = 0.8,
main="부서별 영업 실적")
#x  y 축만 있슴
# 3D 그래프  교재에 없음
library(lattice)
#iris 내장 객체   붓꽃의 정보 R내장 데이터
colnames(iris)
cloud(Petal.Length~Sepal.Length +
Sepal.Width,
data = iris)
# plot3d()  다이나믹하게 처리
install.packages("rgl")
library(rgl)
# 왼쪽마우스 클릭 : 확대
# 오른쪽마우스 클릭 : 회전
plot3d(iris$Sepal.Length,
iris$Sepal.Width,
iris$Petal.Length,
xlab = "S.L",
ylab = "S.W",
zlab = "P.L",
Col = rainbow(2))
install.packages("ROracle")
install.packages("ROracle",type = "source")
library(ROracle)
install.packages("ROracle")
install.packages('devtools')
install.packages("devtools")
devtools::install_github("gmum/gmum.r", ref="master")
install.packages("ROracle")
library(ROracle)
#p202
# 작업디렉토리 지정
getwd()
setwd("~/[009]_MAP")
getwd()
# 001-[구글지도사용하기] ####
install.packages("ggmap")  #구굴맵과의 인터페이스 기능
# install.packages("stringr")
library(ggmap)
library(stringr)
# 위경도 읽어오기
loc <- read.csv("data/강동구주차장위경도.csv",
header = T)
loc
View(loc)
# 지도위치 가져오기
kd <- get_map("Amsa-dong",
zoom = 13,
maptype = "roadmap")
# 지도위치 가져오기   명확한주소사용   한번 스냅샵을 찍으면
kd <- get_map("Amsa-dong",
zoom = 13,
maptype = "roadmap")
# 주차장 위치에 포인트 지정
kor.map <- ggmap(kd) +
geom_point(data = loc,
aes(x = LON, y = LAT),
size = 3,
alpha = 0.7,
color = "red")
# 주차장명과 함께 지도에 출력
kor.map +
geom_text(data = loc,
aes(x = LON,
y = LAT + 0.001,
label = 주차장명),
size = 3)
# 구립 시립 구분하여 문자열 추출  , 주차장명에서 뒤에서 부터 자른다.
loc2 <- str_sub(loc$주차장명,
start = -2,
end = -2)
loc2
# 002-[구립/시립 구별하기] ####
# 구립(구), 시립(시) 공영 주차장
# 구립 "red", 시립 "blue" 표시
loc$주차장명
# 구립 시립 구분하여 문자열 추출  , 주차장명에서 뒤에서 부터 자른다.
loc2 <- str_sub(loc$주차장명,
start = -2,
end = -2)
# 002-[구립/시립 구별하기] ####
# 구립(구), 시립(시) 공영 주차장
# 구립 "red", 시립 "blue" 표시
loc$주차장명
# 구립 시립 구분하여 문자열 추출  , 주차장명에서 뒤에서 부터 자른다.
loc2 <- str_sub(loc$주차장명,
start = -2,
end = -2)
colors <- c()
# 구립과 시립별 포인트 색상변수 지정  , loc의 갯수 만큼 for 문
for ( i in 1:length(loc2)) {
if (loc2[i] == '구' ) {
colors <- c(colors, "red") }
else {
colors <- c(colors, "blue") }
}
loc2
colors
loc2
colors
# 지도위치 가져오기
kd <- get_map("Amsa-dong",
zoom = 13,
maptype = "roadmap")
# 포인트 위지 지정
kor.map <- ggmap(kd) +
geom_point(data = loc,
aes(x = LON, y = LAT),
size = 3,
alpha = 0.7,
color = colors)
# 주차장명 지정하여 출력하기
kor.map +
geom_text(data = loc,
aes(x = LON,
y = LAT + 0.001,
label = 주차장명),
size = 3)
# 경로 데이터 소트가 되어 있어야 한다.
# 003-[지도에 경로 표시하기] ####
# install.packages("ggplot2")
library(ggplot2)
library(ggmap)
# 경로 읽어오기
jeju <- read.csv("data/제주도.csv",
header = T)
jeju
# 지도위치 가져오기     Hallasan    hybrid  맵을 가지고 와서
jeju1 <- get_map("Hallasan",
maptype = "hybrid")
# 포인트 지정
jeju.map <- ggmap(jeju1) +
geom_point(data = jeju,
aes(x = LON, y = LAT),
size = 4,
alpha = 0.7,
col = "red")
# geom_path 함수를 써서
# 경로를 선으로 연결해서 표시
jeju.map +
geom_path(data = jeju,
aes(x = LON, y = LAT),
size = 1,
linetype = 2,
col = "white") +
geom_text(data = jeju,
aes(x = LON,
y = LAT + 0.01,
label = 장소),
size = 4,
col = "green")
# 작업디렉토리 지정
getwd()
setwd("~/[009-1]_MAPTEST")
getwd()
# 위도, 경도 확인 ####
# install.packages("ggmap")
library(ggmap)
# 특정지명 사용하여 위경도 정보 획득
(gc <- geocode(enc2utf8("용인")))
(gc <- geocode(enc2utf8("제주대학교")))
(gc <- geocode(enc2utf8("불국사")))
# 도로명 주소 사용
(gc <- geocode(enc2utf8("경북 경주시 불국로 385")))
# 지번 주소 사용
(gc <- geocode(enc2utf8("세종특별자치시 남면 국세청로 8-14")))
(gc <- geocode(enc2utf8("대전광역시 대덕구 법1동 282-1")))
(gc <- geocode(enc2utf8("대전광역시 서구 둔산동 949")))
(gc <- geocode(enc2utf8("경상북도 경주시 진현동 15")))
# 도로명 주소 사용
(gc <- geocode(enc2utf8("경북 경주시 불국로 385")))
# 지번 주소 사용
(gc <- geocode(enc2utf8("세종특별자치시 남면 국세청로 8-14")))
# 위경도 정보 숫자형으로 변환
(cen <- as.numeric(gc))
# 도로명 주소 사용
(gc <- geocode(enc2utf8("경북 경주시 불국로 385")))
# 위경도 정보 숫자형으로 변환
(cen <- as.numeric(gc))
# roadmap 출력
map <- get_googlemap(center = cen,
maptype = "roadmap",
markers = gc)
ggmap(map)
# satellite 출력
map <- get_googlemap(center = cen,
maptype = "satellite",
markers = gc)
ggmap(map)
# terrain 출력
map <- get_googlemap(center = cen,
maptype = "terrain",
markers = gc)
ggmap(map)
# hybrid 출력
map <- get_googlemap(center = cen,
maptype = "hybrid",
markers = gc)
ggmap(map)
# 국세청 위치 출력 ####
# install.packages("ggmap")
# install.packages("stringr")
library(ggmap)
library(stringr)
loc <- read.csv("data/국세청_위경도.csv",
header = T)
loc
kd <- get_map("Geumnam-myeon,
Sejong-si,
Republic of Korea",
zoom = 11,
maptype = "roadmap")
kd <- get_map("Geumnam-myeon,
Sejong-si,
Republic of Korea",
zoom = 11,
maptype = "roadmap")
kor.map <- ggmap(kd) +
geom_point(data = loc,
aes(x = LON, y = LAT),
size = 5,
alpha = 0.5,
color = "red")
kor.map +
geom_text(data = loc,
aes(x = LON-0.001,
y = LAT-0.008,
label = 위치),
size = 6)
