data <- readLines("NTS_678.txt")
data
data1 <- strsplit(data,split="\\t")
data3
data1
data1 <- strsplit(data1,split=".")
data1 <- strsplit(data1,split="\.")
data1 <- strsplit(data1,split="\\.")
data <- readLines("NTS_678.txt")
data1 <- sapply(data,
extractNoun,
USE.NAMES = FALSE)
data1
data3 <- unlist(data1)
data3
data3 <- gsub("^[0-9]*$","", data3)      #숫자를 없애기
data3
data3 <- gsub(".$","", data3)
data3
data3 <- gsub("^[0-9]*$","", data3)      #숫자를 없애기
data3
write(unlist(data3), "temp1.txt")
data4<- read.table("temp1.txt")
wordcount <- table(data4)
wordcloud(names(wordcount),
freq = wordcount,
scale = c(5, 1),
rot.per = 0.25,
min.freq = 6,
random.order = F,
random.color = T,
colors = palete)
wordcloud2(wordcount,
shape = "cardioid")
wordcloud2(wordcount,
shape = "triangle",
backgroundColor = "black")
# 작업디렉토리 설정
getwd()
setwd("~/[004-3]_WCNTS")
getwd()
library(KoNLP)
library(wordcloud)
# 파일 읽기
(txt <- readLines("data/NTS_678.txt"))
# 날짜정보제거 ####
(txt <- gsub("2017\\.0[678]\\.[0123][0-9]",
"",
txt))
#뽀개기 전에 날자 제거
txt
# 명사 추출
nouns <- sapply(txt,
extractNoun,
USE.NAMES = F)
head(unlist(nouns), 30)
# 두글자 이상 단어만 추출 ####
nouns <- Filter(function(x) {nchar(x) >= 2},
unlist(nouns))
head(unlist(nouns), 30)
# 불필요한 단어 삭제
nouns <- gsub("\\.", "", nouns)
head(unlist(nouns), 30)
# 파일로 중간저장
nouns <- unlist(nouns)
# 빈도수 ####
wordcount <- table(nouns)
head(sort(wordcount, decreasing = T), 30)
# 팔레트 지정
library(RColorBrewer)
palete <- brewer.pal(8, "Dark2")
# wordcloud 출력 ####
wordcloud(names(wordcount),
freq = wordcount,
scale = c(5, 0.5),
rot.per = 0.25,
min.freq = 2,
random.order = F,
random.color = T,
colors = palete)
# wordcloud2 출력 ####
library(wordcloud2)
wordcloud2(wordcount,
fontWeight = NULL,
shape = "star")
wordcloud2(wordcount,
size = 7,
fontWeight = NULL,
figPath = "data/NTS.png")
wordcloud2(wordcount,
size = 7,
fontWeight = NULL,
figPath = "data/NTS.png")
wordcloud2(wordcount,
size = 7,
fontWeight = NULL,
figPath = "data/NTS.png")
letterCloud(wordcount,
size = 4,
fontWeight = NULL,
word = "국세청",
color = "random-light",
backgroundColor="black")
# 작업디렉토리 설정
getwd()
setwd("~/[005-1]_PLYR")
getwd()
# 리스트 만들기
(v1 <- 1:12)
(v2 <- 40:55)
(Test_List <- list(v1, v2))
Test_List[1]
Test_List[[1]]
# 리스트 구성항목별 "중앙값"   홀수
median(Test_List[[1]])
median(Test_List[[2]])
# lapply() ####
# 리스트로 반환
lapply(Test_List, median)
# sapply() 적용 ####
#벡터로 반환
sapply(Test_List, median)
# sapply() : simplify = FALSE
# 입력받은 데이터형으로 반환
# lapply()와 같은 결과
sapply(Test_List, median,
simplify = FALSE)
# 데이터프레임 ####
DF <- read.csv("data/PII.csv")
View(DF)
# 평균키, 몸무게  7번 8번 컬럼
lapply(DF[,7:8], mean)
sapply(DF[,7:8], mean)
# subset => 뽑아낸다.
# subset() : 혈액형별 평균
# 혈액형별 나누기
BT.O <- subset(DF,
subset = (BloodType == "O"))
View(BT.O)
BT.A <- subset(DF,
subset = (BloodType == "A"))
BT.B <- subset(DF,
subset = (BloodType == "B"))
BT.AB <- subset(DF,
subset = (BloodType == "AB"))
View(BT.AB)
# aggregate() ####
aggregate(Height~BloodType, DF, mean)
# 데이터프레임 : 데이터프레임
aggregate(Height~BloodType, DF, mean)
# 데이터프레임 : 리스트
by(DF$Height, DF$BloodType, mean)
# 리스트 : 리스트
lapply(split(DF$Height, DF$BloodType), mean)
#위의 4줄이 한줄로 처리 가능     DB의 집계함수 처럼 동작
# aggregate() ####
aggregate(Height~BloodType, DF, mean)
# 데이터프레임 : 데이터프레임
aggregate(Height~BloodType, DF, mean)
# 벡터 : 벡터     ,혈액형을 기준으로 평균키
tapply(DF$Height, DF$BloodType, mean)
# 데이터프레임 : 리스트
by(DF$Height, DF$BloodType, mean)
# 리스트 : 리스트
lapply(split(DF$Height, DF$BloodType), mean)
# 데이터프레임형 반환
aggregate(Height~BloodType+Gender+Grade, DF, mean)
# 적용대상 데이터 추가
aggregate(cbind(Height,Weight)~BloodType, DF, mean)
# 데이터프레임형 반환
aggregate(Height~BloodType+Gender+Grade, DF, mean)
# 적용대상 데이터 추가
aggregate(cbind(Height,Weight)~BloodType, DF, mean)
# 적용대상 데이터 추가
aggregate(cbind(Height,Weight)~BloodType, DF, mean)
# plyr 패키지 ####
#ply r
library(plyr)
# 혈액형별 정렬(데이터프레임 -> 데이터프레임)
ddply(DF, "BloodType")
# dl  =>  데이터프레임 -> 리스트  , input output
dlply(DF, "BloodType")
# 함수 적용하기
# 단일함수
ddply(DF, "BloodType", nrow)
# 함수 여러개 적용하기
ddply(DF, "BloodType", c("nrow", "ncol"))
# 산술연산 적용
ddply(DF, "BloodType", summarise, heightMean=mean(Height)*2)
# summarise() 함수 사용하기(heightMean은 summarise의 인자)
ddply(DF, "BloodType", summarise, heightMean=mean(Height))
# 함수 여러개 적용하기
ddply(DF, "BloodType", c("nrow", "ncol"))
# summarise() 함수 사용하기(heightMean은 summarise의 인자)
ddply(DF, "BloodType", summarise, heightMean=mean(Height))
# 산술연산 적용
ddply(DF, "BloodType", summarise, heightMean=mean(Height)*2)
# 리스트형식 다중그룹
ddply(DF, .(BloodType), summarise, heightMean=mean(Height))
ddply(DF, .(BloodType, Gender), summarise, heightMean=mean(Height))
ddply(DF, .(BloodType, Gender), summarise, height_Mean=mean(Height))
ddply(DF, .(BloodType, Gender), summarise, height_Mean=avg(Height))
# 작업디렉토리 복원
getwd()
setwd("~")
getwd()
library(RCurl)
library(XML)
library(KoNLP)
library("wordcloud2")
library(wordcloud2)
# 팔레트 지정
library(RColorBrewer)
Client_ID <- "QuXvRyP4NkIBzebrT_Hs"
Client_Secret <- "nuRjoOrM_H"
searchUrl <- "https://openapi.naver.com/v1/search/blog.xml"
query <- URLencode(iconv("4차산업","euc-kr","UTF-8"))
url <- paste(searchUrl, "?query=", query, "&display=100", sep="")
doc <- getURL(url,
httpheader = c('Content-Type' = "application/xml",
'X-Naver-Client-Id' = Client_ID,
'X-Naver-Client-Secret' = Client_Secret))
# 블로그 내용에 대한 리스트 만들기
doc2 <- htmlParse(doc, encoding="UTF-8")
text <- xpathSApply(doc2, "//item/description", xmlValue)
text
# 단어 추출
nouns <- sapply(text,
extractNoun,
USE.NAMES = F)
nouns
writeLines(text, "sample1.txt")
# html tag 제거 ####
(text <- gsub("^<*>$",
"",
text))
# html tag 제거 ####
(text <- gsub("^<*>$",
"",
text))
(txt <- gsub("<*>",
"",
txt))
(text <- gsub("<*>",
"",
text))
(text <- gsub("<?>",
"",
text))
doc <- getURL(url,
httpheader = c('Content-Type' = "application/xml",
'X-Naver-Client-Id' = Client_ID,
'X-Naver-Client-Secret' = Client_Secret))
# 블로그 내용에 대한 리스트 만들기
doc2 <- htmlParse(doc, encoding="UTF-8")
text <- xpathSApply(doc2, "//item/description", xmlValue)
text
(text <- gsub("<+[[:alpha:]]>+",
"",
text))
(text <- gsub("<+[[:punct:]][[:alpha:]]>+",
"",
text))
writeLines(text, "sample1.txt")
text2<-readLines("sample1.txt")
text2
# 단어 추출
nouns <- sapply(text2,
extractNoun,
USE.NAMES = F)
nouns
nouns <- unlist(nouns)
nouns
# 빈도수 ####
wordcount <- table(nouns)
wordcount
wordcloud2(wordcount,
shape = "star",
backgroundColor = "black")
# RMySQL 패키지 설치 및 호출
install.packages("RMySQL")
library(RMySQL)
#도커 ip   id pw
# DB 연결설정
con <- dbConnect(MySQL(),
user="root",
password="rootpwd",
host="192.168.99.100",
dbname="bigdata_db",
client.flag=CLIENT_MULTI_RESULTS)
# SQL구문 설정
sql <- "SELECT * from rclass_tb"
# 쿼리 요청
rows <- dbGetQuery(con, sql)
# 결과 확인
rows
library(RCurl)
library(XML)
library(KoNLP)
library(wordcloud2)
# 팔레트 지정
library(RColorBrewer)
Client_ID <- "QuXvRyP4NkIBzebrT_Hs"
Client_Secret <- "nuRjoOrM_H"
searchUrl <- "https://openapi.naver.com/v1/search/blog.xml"
query <- URLencode(iconv("4차산업","euc-kr","UTF-8"))
url <- paste(searchUrl, "?query=", query, "&display=100", sep="")
doc <- getURL(url,
httpheader = c('Content-Type' = "application/xml",
'X-Naver-Client-Id' = Client_ID,
'X-Naver-Client-Secret' = Client_Secret))
# 블로그 내용에 대한 리스트 만들기
doc2 <- htmlParse(doc, encoding="UTF-8")
text <- xpathSApply(doc2, "//item/description", xmlValue)
text
# html tag 제거 ####
(text <- gsub("^<*>$",
"",
text))
(text <- gsub("<+[[:alpha:]]>+",
"",
text))
(text <- gsub("<+[[:punct:]][[:alpha:]]>+",
"",
text))
writeLines(text, "sample1.txt")
text2<-readLines("sample1.txt")
text2
# 단어 추출
nouns <- sapply(text2,
extractNoun,
USE.NAMES = F)
nouns <- unlist(nouns)
# 빈도수 ####
wordcount <- table(nouns)
wordcloud2(wordcount,
shape = "star",
backgroundColor = "black")
# Oracle 패키지 설치 및 호출
install.packages("ora")
library(ora)
# Oracle 패키지 설치 및 호출
install.packages("ROracle")
library(ROracle)
# Oracle 패키지 설치 및 호출
install.packages("ora")
# 작업디렉토리 지정
getwd()
setwd("~/[007]_PLOT")
objects()
#rm
#메모리에 올리는 방법 : 변수할당,libary
# 메모리에 데이터프레임 지정 ####
# 확인  , 메모리에 올린것 확인
search()
# 파일에서 읽어오기
DF <- read.csv("data/PII.csv")
DF
DF$Height
head(DF)
# 경로지정  데이터 프레임에
attach(DF)
search()
DF
Height
# 데이터 프레임 구조확인
str(DF)
# (고수준) 산점도 출력
# 벡터 사용 ####
plot(Age)
plot(DF$Age)
# (고수준) 산점도 출력
# 벡터 사용 ####
plot(Age)
plot(DF$Age)
plot(Height, Weight)
plot(Height, Gender)
# (고수준) 산점도 출력
# 벡터 사용 ####
plot(Age)     #빈도를 계산헤서 차트화
Age
# (고수준) 산점도 출력
# 벡터 사용 ####
plot(Age)     #빈도를 계산헤서 차트화
plot(Height, Weight)
plot(Weight ~ Height)
plot(Gender, Height)
# (고수준) 산점도 출력
# 벡터 사용 ####
plot(Age)     #빈도를 계산헤서 차트화
plot(Height, Gender)
plot(Gender, Height)
# (고수준) 데이터 프레임 ####
#Vector      Vector   벡터 두개를 묶어서 Data Frame 만든다.
DF2 <- data.frame(DF$Height, DF$Weight)
class(DF2)
plot(DF2)
DF3 <- cbind(DF2, DF$Age)  #DF2 옆에 age 추가
DF3
plot(DF3)   #그래프 6개
plot(DF2)
plot(DF)
# (고수준) 산점도 점모양 지정 ####
#키와 몸무게의 관계 그래프
plot(Weight ~ Height,
pch = as.integer(Gender))
# (저수준) 범례출력 ####
legend("topleft",
c("남", "여"),
pch = DF$Gender)
# (고수준) 명목변수로 구분
coplot(Weight ~ Height | Gender)
# (고수준) 명목변수로 구분  , 남자와 여자 를 구분한 그래프로 명목형 변수 필요 실제 그래프는 하나
coplot(Weight ~ Height | Gender)
DF
# (고수준) 레이블 출력 안함
plot(Weight ~ Height,
ann = FALSE)
# (저수준) 레이블 출력
title(main = "몸무게와 키의 상관관계")
title(xlab = "키")
title(ylab = "몸무게")
# (저수준) 그리드 출력
grid()
# (저수준) 평균선 출력
heightMean <- mean(Height)
abline(v = heightMean, col = "red")
weightMean <- mean(Weight)
abline(h = weightMean, col = "blue")
#naver 1~20 실시간 검색어 크롤링
text <- readLines("https://www.naver.com")
Encoding(text) = "UTF-8"
gsub(pattern="<.*?>", replacement="", grep(pattern="ah_k", text, value=TRUE)[1:20])
#P181    barplot() 함수
# 교차빈도표 작성   table=>빈도분석
(FreqBlood <- table(DF$BloodType))
# (고수준) 막대그래프 출력 ####
barplot(FreqBlood)
plot(BloodType)
plot(BloodType)
# (고수준) 막대그래프 출력 ####
barplot(FreqBlood)
# (저수준) 레이블 출력
title(main = "혈액형별 빈도수")
title(xlab = "혈액형")
title(ylab = "빈도수")
# (고수준) 막대그래프 출력 ####
barplot(FreqBlood)
# (저수준) 레이블 출력
title(main = "혈액형별 빈도수")
plot(BloodType)
# (저수준) 레이블 출력
title(main = "혈액형별 빈도수")
# 혈액형별 평균키
(HEIGHT <- tapply(DF$Height,
DF$BloodType,
mean))
# (고수준) 막대그래프 출력
barplot(HEIGHT, ylim = c(0, 200))
barplot(HEIGHT, ylim = c(0, 300))
# (고수준) 박스플롯 출력
boxplot(Height)
boxplot(Height ~ BloodType)   #혈액형별  명목형 독립변수
plot(BloodType, Height)
plot(BloodType, Height)
boxplot(Height ~ BloodType)   #혈액형별  명목형 독립변수   이상치=> 값이 많이벗어난 데이타 통계학에서는 빼고 처리
# (고수준) 히스토그램 출력 ####
hist(Height)
barplot(Height)
#막대그래프 : 높이만 의미가있고 , 히스토그램은 구간도 의미가있다.
# (고수준) 히스토그램 출력 ####
hist(Height)
hist(Height,
breaks = 10)
hist(Height,
breaks = 10,
prob = TRUE)
# (저수준) 밀도함수
lines(density(Height))
BreakPoint <- seq(min(Height),
max(Height) + 7, by = 7)
hist(Height, breaks = BreakPoint)
DiffPoint <- c(min(Height),
165, 170, 180, 185, 190)
DiffPoint <- c(min(Height),
165, 170, 180, 185, 190)
hist(Height, breaks = DiffPoint)
#창 클리어 빗자루
#p185  창 나누기
# plot창 분할 ####
par(mfrow = c(2,3))
plot(Weight, Height)
plot(Gender, Height)
barplot(table(BloodType))
boxplot(Height)
boxplot(Height ~ BloodType)
hist(Height, breaks = 10)
par(mfrow = c(1,1))
boxplot(Height)
# (고수준) 다수의 독립변수 ####
plot(Weight ~ Height +
Age +
Grade +
Picture +
Gender)
# (고수준) 다수의 독립변수 ####
plot(Weight ~ Height +
Age +
Grade +
Picture +
Gender)
runif(30)
