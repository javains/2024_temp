min.freq = 6,
random.order = F,
random.color = T,
colors = palete)
wordcloud2(wordcount,
shape = "cardioid")
wordcloud2(wordcount,
shape = "triangle",
backgroundColor = "black")
# 작업디렉토리 설정
getwd()
setwd("~/[004-3]_WCNTS")
getwd()
library(KoNLP)
library(wordcloud)
# 파일 읽기
(txt <- readLines("data/NTS_678.txt"))
# 날짜정보제거 ####
(txt <- gsub("2017\\.0[678]\\.[0123][0-9]",
"",
txt))
#뽀개기 전에 날자 제거
txt
# 명사 추출
nouns <- sapply(txt,
extractNoun,
USE.NAMES = F)
head(unlist(nouns), 30)
# 두글자 이상 단어만 추출 ####
nouns <- Filter(function(x) {nchar(x) >= 2},
unlist(nouns))
head(unlist(nouns), 30)
# 불필요한 단어 삭제
nouns <- gsub("\\.", "", nouns)
head(unlist(nouns), 30)
# 파일로 중간저장
nouns <- unlist(nouns)
# 빈도수 ####
wordcount <- table(nouns)
head(sort(wordcount, decreasing = T), 30)
# 팔레트 지정
library(RColorBrewer)
palete <- brewer.pal(8, "Dark2")
# wordcloud 출력 ####
wordcloud(names(wordcount),
freq = wordcount,
scale = c(5, 0.5),
rot.per = 0.25,
min.freq = 2,
random.order = F,
random.color = T,
colors = palete)
# wordcloud2 출력 ####
library(wordcloud2)
wordcloud2(wordcount,
fontWeight = NULL,
shape = "star")
wordcloud2(wordcount,
size = 7,
fontWeight = NULL,
figPath = "data/NTS.png")
wordcloud2(wordcount,
size = 7,
fontWeight = NULL,
figPath = "data/NTS.png")
wordcloud2(wordcount,
size = 7,
fontWeight = NULL,
figPath = "data/NTS.png")
letterCloud(wordcount,
size = 4,
fontWeight = NULL,
word = "국세청",
color = "random-light",
backgroundColor="black")
# 작업디렉토리 설정
getwd()
setwd("~/[005-1]_PLYR")
getwd()
# 리스트 만들기
(v1 <- 1:12)
(v2 <- 40:55)
(Test_List <- list(v1, v2))
Test_List[1]
Test_List[[1]]
# 리스트 구성항목별 "중앙값"   홀수
median(Test_List[[1]])
median(Test_List[[2]])
# lapply() ####
# 리스트로 반환
lapply(Test_List, median)
# sapply() 적용 ####
#벡터로 반환
sapply(Test_List, median)
# sapply() : simplify = FALSE
# 입력받은 데이터형으로 반환
# lapply()와 같은 결과
sapply(Test_List, median,
simplify = FALSE)
# 데이터프레임 ####
DF <- read.csv("data/PII.csv")
View(DF)
# 평균키, 몸무게  7번 8번 컬럼
lapply(DF[,7:8], mean)
sapply(DF[,7:8], mean)
# subset => 뽑아낸다.
# subset() : 혈액형별 평균
# 혈액형별 나누기
BT.O <- subset(DF,
subset = (BloodType == "O"))
View(BT.O)
BT.A <- subset(DF,
subset = (BloodType == "A"))
BT.B <- subset(DF,
subset = (BloodType == "B"))
BT.AB <- subset(DF,
subset = (BloodType == "AB"))
View(BT.AB)
# aggregate() ####
aggregate(Height~BloodType, DF, mean)
# 데이터프레임 : 데이터프레임
aggregate(Height~BloodType, DF, mean)
# 데이터프레임 : 리스트
by(DF$Height, DF$BloodType, mean)
# 리스트 : 리스트
lapply(split(DF$Height, DF$BloodType), mean)
#위의 4줄이 한줄로 처리 가능     DB의 집계함수 처럼 동작
# aggregate() ####
aggregate(Height~BloodType, DF, mean)
# 데이터프레임 : 데이터프레임
aggregate(Height~BloodType, DF, mean)
# 벡터 : 벡터     ,혈액형을 기준으로 평균키
tapply(DF$Height, DF$BloodType, mean)
# 데이터프레임 : 리스트
by(DF$Height, DF$BloodType, mean)
# 리스트 : 리스트
lapply(split(DF$Height, DF$BloodType), mean)
# 데이터프레임형 반환
aggregate(Height~BloodType+Gender+Grade, DF, mean)
# 적용대상 데이터 추가
aggregate(cbind(Height,Weight)~BloodType, DF, mean)
# 데이터프레임형 반환
aggregate(Height~BloodType+Gender+Grade, DF, mean)
# 적용대상 데이터 추가
aggregate(cbind(Height,Weight)~BloodType, DF, mean)
# 적용대상 데이터 추가
aggregate(cbind(Height,Weight)~BloodType, DF, mean)
# plyr 패키지 ####
#ply r
library(plyr)
# 혈액형별 정렬(데이터프레임 -> 데이터프레임)
ddply(DF, "BloodType")
# dl  =>  데이터프레임 -> 리스트  , input output
dlply(DF, "BloodType")
# 함수 적용하기
# 단일함수
ddply(DF, "BloodType", nrow)
# 함수 여러개 적용하기
ddply(DF, "BloodType", c("nrow", "ncol"))
# 산술연산 적용
ddply(DF, "BloodType", summarise, heightMean=mean(Height)*2)
# summarise() 함수 사용하기(heightMean은 summarise의 인자)
ddply(DF, "BloodType", summarise, heightMean=mean(Height))
# 함수 여러개 적용하기
ddply(DF, "BloodType", c("nrow", "ncol"))
# summarise() 함수 사용하기(heightMean은 summarise의 인자)
ddply(DF, "BloodType", summarise, heightMean=mean(Height))
# 산술연산 적용
ddply(DF, "BloodType", summarise, heightMean=mean(Height)*2)
# 리스트형식 다중그룹
ddply(DF, .(BloodType), summarise, heightMean=mean(Height))
ddply(DF, .(BloodType, Gender), summarise, heightMean=mean(Height))
ddply(DF, .(BloodType, Gender), summarise, height_Mean=mean(Height))
ddply(DF, .(BloodType, Gender), summarise, height_Mean=avg(Height))
# 작업디렉토리 복원
getwd()
setwd("~")
getwd()
library(RCurl)
library(XML)
library(KoNLP)
library("wordcloud2")
library(wordcloud2)
# 팔레트 지정
library(RColorBrewer)
Client_ID <- "QuXvRyP4NkIBzebrT_Hs"
Client_Secret <- "nuRjoOrM_H"
searchUrl <- "https://openapi.naver.com/v1/search/blog.xml"
query <- URLencode(iconv("4차산업","euc-kr","UTF-8"))
url <- paste(searchUrl, "?query=", query, "&display=100", sep="")
doc <- getURL(url,
httpheader = c('Content-Type' = "application/xml",
'X-Naver-Client-Id' = Client_ID,
'X-Naver-Client-Secret' = Client_Secret))
# 블로그 내용에 대한 리스트 만들기
doc2 <- htmlParse(doc, encoding="UTF-8")
text <- xpathSApply(doc2, "//item/description", xmlValue)
text
# 단어 추출
nouns <- sapply(text,
extractNoun,
USE.NAMES = F)
nouns
writeLines(text, "sample1.txt")
# html tag 제거 ####
(text <- gsub("^<*>$",
"",
text))
# html tag 제거 ####
(text <- gsub("^<*>$",
"",
text))
(txt <- gsub("<*>",
"",
txt))
(text <- gsub("<*>",
"",
text))
(text <- gsub("<?>",
"",
text))
doc <- getURL(url,
httpheader = c('Content-Type' = "application/xml",
'X-Naver-Client-Id' = Client_ID,
'X-Naver-Client-Secret' = Client_Secret))
# 블로그 내용에 대한 리스트 만들기
doc2 <- htmlParse(doc, encoding="UTF-8")
text <- xpathSApply(doc2, "//item/description", xmlValue)
text
(text <- gsub("<+[[:alpha:]]>+",
"",
text))
(text <- gsub("<+[[:punct:]][[:alpha:]]>+",
"",
text))
writeLines(text, "sample1.txt")
text2<-readLines("sample1.txt")
text2
# 단어 추출
nouns <- sapply(text2,
extractNoun,
USE.NAMES = F)
nouns
nouns <- unlist(nouns)
nouns
# 빈도수 ####
wordcount <- table(nouns)
wordcount
wordcloud2(wordcount,
shape = "star",
backgroundColor = "black")
# RMySQL 패키지 설치 및 호출
install.packages("RMySQL")
library(RMySQL)
#도커 ip   id pw
# DB 연결설정
con <- dbConnect(MySQL(),
user="root",
password="rootpwd",
host="192.168.99.100",
dbname="bigdata_db",
client.flag=CLIENT_MULTI_RESULTS)
# SQL구문 설정
sql <- "SELECT * from rclass_tb"
# 쿼리 요청
rows <- dbGetQuery(con, sql)
# 결과 확인
rows
library(RCurl)
library(XML)
library(KoNLP)
library(wordcloud2)
# 팔레트 지정
library(RColorBrewer)
Client_ID <- "QuXvRyP4NkIBzebrT_Hs"
Client_Secret <- "nuRjoOrM_H"
searchUrl <- "https://openapi.naver.com/v1/search/blog.xml"
query <- URLencode(iconv("4차산업","euc-kr","UTF-8"))
url <- paste(searchUrl, "?query=", query, "&display=100", sep="")
doc <- getURL(url,
httpheader = c('Content-Type' = "application/xml",
'X-Naver-Client-Id' = Client_ID,
'X-Naver-Client-Secret' = Client_Secret))
# 블로그 내용에 대한 리스트 만들기
doc2 <- htmlParse(doc, encoding="UTF-8")
text <- xpathSApply(doc2, "//item/description", xmlValue)
text
# html tag 제거 ####
(text <- gsub("^<*>$",
"",
text))
(text <- gsub("<+[[:alpha:]]>+",
"",
text))
(text <- gsub("<+[[:punct:]][[:alpha:]]>+",
"",
text))
writeLines(text, "sample1.txt")
text2<-readLines("sample1.txt")
text2
# 단어 추출
nouns <- sapply(text2,
extractNoun,
USE.NAMES = F)
nouns <- unlist(nouns)
# 빈도수 ####
wordcount <- table(nouns)
wordcloud2(wordcount,
shape = "star",
backgroundColor = "black")
# Oracle 패키지 설치 및 호출
install.packages("ora")
library(ora)
# Oracle 패키지 설치 및 호출
install.packages("ROracle")
library(ROracle)
# Oracle 패키지 설치 및 호출
install.packages("ora")
# 두개의 자료 비교 ####
# (고수준) + (저수준)
(TS1 <- c(round(runif(30) * 100)))  #정수 형태의 난수 30개 만들어 낸다 .
(TS2 <- c(round(runif(30) * 100)))
(TS1 <- sort(TS1, decreasing = FALSE))  #오름차순 정렬
(TS2 <- sort(TS2, decreasing = FALSE))
#두개의 변화량을 시각화
# (고수준)
plot(TS1,
type = "l")
# (저수준)
lines(TS2,
lty = "dashed",
col = "red")
# plot() 함수 옵션 ####
v1 <- seq(-10, 10, 1)
v2 <- v1 ^ 2
# 선, 점 지정 ####
plot(v1, v2, type = "p",
main = "Graph-1", sub = "점타입")
plot(v1, v2, type = "l",
main = "Graph-2", sub = "선타입")
# 선, 점 지정 ####
plot(v1, v2, type = "p",
main = "Graph-1", sub = "점타입")
plot(v1, v2, type = "l",
main = "Graph-2", sub = "선타입")
plot(v1, v2, type = "c",
main = "Graph-3", sub = "선 - 점")
plot(v1, v2, type = "b",
main = "Graph-4", sub = "선과 점")
plot(v1, v2, type = "o",
main = "Graph-5", sub = "선위에 점")
plot(v1, v2, type = "h",
main = "Graph-6", sub = "수직선")
plot(v1, v2, type = "s",
main = "Graph-7", sub = "계단형")
# 테두리 모양 ####
plot(v1, v2, type = "p", bty = "o")
plot(v1, v2, type = "p", bty = "7")
plot(v1, v2, type = "p", bty = "c")
plot(v1, v2, type = "p", bty = "u")
plot(v1, v2, type = "p", bty = "]")
# 색지정 ####
plot(v1, v2, type = "p", col = "blue")
plot(v1, v2, type = "p", bty = "l")
plot(v1, v2, type = "p", bty = "7")
plot(v1, v2, type = "p", bty = "c")
plot(v1, v2, type = "p", bty = "u")
plot(v1, v2, type = "p", bty = "]")
# 색지정 ####
plot(v1, v2, type = "p", col = "blue")
# 점모양 지정(0~25) ####
plot(v1, v2, type = "p", pch = 25)
plot(v1, v2, type = "p", pch = "$")
# 선모양 지정 ####
plot(v1, v2, type = "l", col = "red")
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 1)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 2)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 3)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 4)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 5)
# 점모양 지정(0~25) ####
plot(v1, v2, type = "p", pch = 25)
plot(v1, v2, type = "p", pch = 1)
plot(v1, v2, type = "p", pch = 3)
plot(v1, v2, type = "p", pch = "*")
plot(v1, v2, type = "l", col = "red", lwd = 4)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 1)
plot(v1, v2, type = "l", col = "red", lwd = 4, lty = 2)
plot(v1, v2, type = "l", col = "red", lwd = 2)
plot(v1, v2, type = "l", col = "red", lwd = 4)
# pie() 그래프 출력 ####
#외부 패키지 필요   한가지 정보를 강하게 보이고 싶으면 pi chart
#pi chart 의 항목이 균등하면 => 막대 차트로 바꾸는게 더 좋다
#차트를 완성 한후 어떻게 전달할지가 스토리 텔링
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
library(graphics)
x <- c(9, 15, 20, 16)
label <- c("영업1팀",
"영업2팀",
"영업3팀",
"영업4팀")
pie(x,
labels = label,
main = "부서별 영업 실적")
#pi 그래프의 시작점  12시 방향
pie(x,
init.angle = 90,
labels = label,
main = "부서별 영업 실적")
pct <- round(x/sum(x) * 100)
label <- paste(label, pct)
label <- paste(label, "%", sep = " ")
pie(x,
init.angle = 90,
col = rainbow(length(x)),
labels = label,
main = "부서별 영업 실적")
# 3D 파일차트 ####
install.packages("plotrix")
library(plotrix)
pie3D(x,
labels = label,
explode = 0.1,
labelcex = 0.8,
main="부서별 영업 실적")
#x  y 축만 있슴
# 3D 그래프  교재에 없음
library(lattice)
#iris 내장 객체   붓꽃의 정보 R내장 데이터
colnames(iris)
cloud(Petal.Length~Sepal.Length +
Sepal.Width,
data = iris)
# plot3d()  다이나믹하게 처리
install.packages("rgl")
library(rgl)
# 왼쪽마우스 클릭 : 확대
# 오른쪽마우스 클릭 : 회전
plot3d(iris$Sepal.Length,
iris$Sepal.Width,
iris$Petal.Length,
xlab = "S.L",
ylab = "S.W",
zlab = "P.L",
Col = rainbow(2))
install.packages("ROracle")
install.packages("ROracle",type = "source")
library(ROracle)
install.packages("ROracle")
install.packages('devtools')
install.packages("devtools")
devtools::install_github("gmum/gmum.r", ref="master")
install.packages("ROracle")
library(ROracle)
# 데이터 읽어오기
OT <- read.csv("data/cross.csv")
# 작업디렉토리 지정
getwd()
setwd("~/[010]_STT")
getwd()
# 데이터 읽어오기
OT <- read.csv("data/cross.csv")
head(OT)
# 카이제곱 검정
# p-value 및 카이제곱값 확인
CrossTable(OT$야근,
OT$승진,
chisq = TRUE)
# 카이제곱 검정
# p-value 및 카이제곱값 확인
CrossTable(OT$야근,
OT$승진,
chisq = TRUE)
# 카이제곱 검정
# p-value 및 카이제곱값 확인
CrossTable(OT$야근,
OT$승진,
chisq = TRUE)
# 작업디렉토리 지정
getwd()
setwd("~/[103]_SPRJ")
setwd("~/[104]_SPRJ")
getwd()
# foreign 패키지 설치
install.packages("foreign")
library(foreign)             # SPSS 파일 로드
library(dplyr)               # 전처리
library(ggplot2)             # 시각화
library(readxl)              # 엑셀 파일 불러오기
# SPSS 데이터 불러오기
raw_welfare <- read.spss(file = "data/Koweps.sav",
to.data.frame = T)
# 복사본 만들기
welfare <- raw_welfare
# 데이터 검토하기
head(welfare)
tail(welfare)
View(welfare)
summary(welfare)
# 변수명 바꾸기
welfare <- rename(welfare,
sex = h10_g3,              # 성별
birth = h10_g4,            # 출생 연도
marriage = h10_g10,        # 혼인 상태
religion = h10_g11,        # 종교
income = p1002_8aq1,       # 월급
code_job = h10_eco9,       # 직종 코드
code_region = h10_reg7)    # 지역 코드
