wordcloud2(demoFreq,
minRotation = pi/6,
maxRotation = -pi/6)
#일반적으로 많이 사용하는 값들이다.
wordcloud2(demoFreq,
minRotation = pi/6,
maxRotation = pi/6,
rotateRatio = 0.25)
# 그림파일을 사용하여 출력 ####
wordcloud2(demoFreq,
figPath = "data/koo.jpg",
color = "skyblue")
# 그림파일을 사용하여 출력 ####
wordcloud2(demoFreq,
figPath = "data/koo.jpg",
color = "skyblue")
# 그림파일을 사용하여 출력 ####
wordcloud2(demoFreq,
figPath = "data/koo.jpg",
color = "skyblue")
# 그림파일을 사용하여 출력 ####
wordcloud2(demoFreq,
figPath = "data/koo.jpg",
color = "skyblue")
install.packages("devtools")
#library 안하고 다이렉트 사용
devtools::install_github("lchiffon/wordcloud2")
wordcloud2(demoFreq,
figPath = "data/koo.jpg",
color = "skyblue")
wordcloud2(demoFreq,
figPath = "data/koo.jpg",
color = "blue")
# letterCloud() 함수  글자모양으로 찍는다  ####
letterCloud(demoFreq,
word = "R",
color = "random-light",
backgroundColor="black")
letterCloud(demoFreq,
word = "BIG",
color = "blue",
backgroundColor="green")
# letterCloud() 함수  글자모양으로 찍는다  ####
letterCloud(demoFreq,
word = "R",
color = "random-light",
backgroundColor="black")
letterCloud(demoFreq,
word = "BIG",
color = "blue",
backgroundColor="green")
letterCloud(demoFreq,
word = "구",
color = "random-light",
backgroundColor="black")
data <- readLines("NTS_678.txt")
getwd()
setwd("~")
getwd()
data <- readLines("NTS_678.txt")
data
data1 <- sapply(data,
extractNoun,
USE.NAMES = FALSE)
library(KoNLP)
library(wordcloud)
data1 <- sapply(data,
extractNoun,
USE.NAMES = FALSE)
data1
data3 <- unlist(data1)   #벡터로 쪼개
data3
data3
data3 <- gsub("\^[0-9]*$","", data3)      #숫자를 없애기
data3 <- gsub("^[0-9]*$","", data3)      #숫자를 없애기
data3
data3 <- gsub(".$","", data3)
data3
data3 <- gsub("^[0-9]*$","", data3)      #숫자를 없애기
data3
data <- readLines("NTS_678.txt")
data
data1 <- sapply(data,
extractNoun,
USE.NAMES = FALSE)
data3 <- unlist(data1)   #벡터로 쪼개
data3
data3 <- gsub(".$","", data3)
data3 <- gsub("^[0-9]*$","", data3)      #숫자를 없애기
data3
data3 <- gsub("^[가-힇]","", data3)
data3
data <- readLines("NTS_678.txt")
data1 <- sapply(data,
extractNoun,
USE.NAMES = FALSE)
data3 <- unlist(data1)   #벡터로 쪼개
data3
data3 <- gsub("^[가-힇]","", data3)
data3
data <- readLines("NTS_678.txt")
data1 <- sapply(data,
extractNoun,
USE.NAMES = FALSE)
data3 <- unlist(data1)   #벡터로 쪼개
data3
data3 <- gsub("^[0-9]*$","", data3)      #숫자를 없애기
data3
data3 <- gsub(".$","", data3)
data3
data3 <- gsub("^[0-9]*$","", data3)      #숫자를 없애기
data3
write(unlist(data3), "temp1.txt")
data4<- read.table("temp1.txt")
data4
wordcount <- table(data4)
wordcount
wordcloud(names(wordcount),
freq = wordcount,
scale = c(5, 1),
rot.per = 0.25,
min.freq = 6,
random.order = F,
random.color = T,
colors = palete)
library(RColorBrewer)
palete <- brewer.pal(8, "Dark2") #Dark2가 지원한는 색상 8개 사용
wordcloud(names(wordcount),
freq = wordcount,
scale = c(5, 1),
rot.per = 0.25,
min.freq = 6,
random.order = F,
random.color = T,
colors = palete)
#install.packages("wordcloud2")
# library(jsonlite)
# library(yaml)
library("wordcloud2")
wordcloud2(wordcount,
shape = "cardioid")
wordcloud2(demoFreq,
shape = "star",
backgroundColor = "black")
wordcloud2(wordcount,
shape = "star",
backgroundColor = "black")
wordcloud2(wordcount,
shape = "triangle",
backgroundColor = "black")
wordcloud2(wordcount,
color = rep(c("red", "skyblue"),
length.out=nrow(demoFreq)),
fontWeight = "bold")
wordcloud2(wordcount,
shape = "triangle",
backgroundColor = "black")
data <- readLines("NTS_678.txt")
data
data <- readLines("NTS_678.txt")
data
data1 <- strsplit(data,split="\\t")
data3
data1
data1 <- strsplit(data1,split=".")
data1 <- strsplit(data1,split="\.")
data1 <- strsplit(data1,split="\\.")
data <- readLines("NTS_678.txt")
data1 <- sapply(data,
extractNoun,
USE.NAMES = FALSE)
data1
data3 <- unlist(data1)
data3
data3 <- gsub("^[0-9]*$","", data3)      #숫자를 없애기
data3
data3 <- gsub(".$","", data3)
data3
data3 <- gsub("^[0-9]*$","", data3)      #숫자를 없애기
data3
write(unlist(data3), "temp1.txt")
data4<- read.table("temp1.txt")
wordcount <- table(data4)
wordcloud(names(wordcount),
freq = wordcount,
scale = c(5, 1),
rot.per = 0.25,
min.freq = 6,
random.order = F,
random.color = T,
colors = palete)
wordcloud2(wordcount,
shape = "cardioid")
wordcloud2(wordcount,
shape = "triangle",
backgroundColor = "black")
# 작업디렉토리 설정
getwd()
setwd("~/[004-3]_WCNTS")
getwd()
library(KoNLP)
library(wordcloud)
# 파일 읽기
(txt <- readLines("data/NTS_678.txt"))
# 날짜정보제거 ####
(txt <- gsub("2017\\.0[678]\\.[0123][0-9]",
"",
txt))
#뽀개기 전에 날자 제거
txt
# 명사 추출
nouns <- sapply(txt,
extractNoun,
USE.NAMES = F)
head(unlist(nouns), 30)
# 두글자 이상 단어만 추출 ####
nouns <- Filter(function(x) {nchar(x) >= 2},
unlist(nouns))
head(unlist(nouns), 30)
# 불필요한 단어 삭제
nouns <- gsub("\\.", "", nouns)
head(unlist(nouns), 30)
# 파일로 중간저장
nouns <- unlist(nouns)
# 빈도수 ####
wordcount <- table(nouns)
head(sort(wordcount, decreasing = T), 30)
# 팔레트 지정
library(RColorBrewer)
palete <- brewer.pal(8, "Dark2")
# wordcloud 출력 ####
wordcloud(names(wordcount),
freq = wordcount,
scale = c(5, 0.5),
rot.per = 0.25,
min.freq = 2,
random.order = F,
random.color = T,
colors = palete)
# wordcloud2 출력 ####
library(wordcloud2)
wordcloud2(wordcount,
fontWeight = NULL,
shape = "star")
wordcloud2(wordcount,
size = 7,
fontWeight = NULL,
figPath = "data/NTS.png")
wordcloud2(wordcount,
size = 7,
fontWeight = NULL,
figPath = "data/NTS.png")
wordcloud2(wordcount,
size = 7,
fontWeight = NULL,
figPath = "data/NTS.png")
letterCloud(wordcount,
size = 4,
fontWeight = NULL,
word = "국세청",
color = "random-light",
backgroundColor="black")
# 작업디렉토리 설정
getwd()
setwd("~/[005-1]_PLYR")
getwd()
# 리스트 만들기
(v1 <- 1:12)
(v2 <- 40:55)
(Test_List <- list(v1, v2))
Test_List[1]
Test_List[[1]]
# 리스트 구성항목별 "중앙값"   홀수
median(Test_List[[1]])
median(Test_List[[2]])
# lapply() ####
# 리스트로 반환
lapply(Test_List, median)
# sapply() 적용 ####
#벡터로 반환
sapply(Test_List, median)
# sapply() : simplify = FALSE
# 입력받은 데이터형으로 반환
# lapply()와 같은 결과
sapply(Test_List, median,
simplify = FALSE)
# 데이터프레임 ####
DF <- read.csv("data/PII.csv")
View(DF)
# 평균키, 몸무게  7번 8번 컬럼
lapply(DF[,7:8], mean)
sapply(DF[,7:8], mean)
# subset => 뽑아낸다.
# subset() : 혈액형별 평균
# 혈액형별 나누기
BT.O <- subset(DF,
subset = (BloodType == "O"))
View(BT.O)
BT.A <- subset(DF,
subset = (BloodType == "A"))
BT.B <- subset(DF,
subset = (BloodType == "B"))
BT.AB <- subset(DF,
subset = (BloodType == "AB"))
View(BT.AB)
# aggregate() ####
aggregate(Height~BloodType, DF, mean)
# 데이터프레임 : 데이터프레임
aggregate(Height~BloodType, DF, mean)
# 데이터프레임 : 리스트
by(DF$Height, DF$BloodType, mean)
# 리스트 : 리스트
lapply(split(DF$Height, DF$BloodType), mean)
#위의 4줄이 한줄로 처리 가능     DB의 집계함수 처럼 동작
# aggregate() ####
aggregate(Height~BloodType, DF, mean)
# 데이터프레임 : 데이터프레임
aggregate(Height~BloodType, DF, mean)
# 벡터 : 벡터     ,혈액형을 기준으로 평균키
tapply(DF$Height, DF$BloodType, mean)
# 데이터프레임 : 리스트
by(DF$Height, DF$BloodType, mean)
# 리스트 : 리스트
lapply(split(DF$Height, DF$BloodType), mean)
# 데이터프레임형 반환
aggregate(Height~BloodType+Gender+Grade, DF, mean)
# 적용대상 데이터 추가
aggregate(cbind(Height,Weight)~BloodType, DF, mean)
# 데이터프레임형 반환
aggregate(Height~BloodType+Gender+Grade, DF, mean)
# 적용대상 데이터 추가
aggregate(cbind(Height,Weight)~BloodType, DF, mean)
# 적용대상 데이터 추가
aggregate(cbind(Height,Weight)~BloodType, DF, mean)
# plyr 패키지 ####
#ply r
library(plyr)
# 혈액형별 정렬(데이터프레임 -> 데이터프레임)
ddply(DF, "BloodType")
# dl  =>  데이터프레임 -> 리스트  , input output
dlply(DF, "BloodType")
# 함수 적용하기
# 단일함수
ddply(DF, "BloodType", nrow)
# 함수 여러개 적용하기
ddply(DF, "BloodType", c("nrow", "ncol"))
# 산술연산 적용
ddply(DF, "BloodType", summarise, heightMean=mean(Height)*2)
# summarise() 함수 사용하기(heightMean은 summarise의 인자)
ddply(DF, "BloodType", summarise, heightMean=mean(Height))
# 함수 여러개 적용하기
ddply(DF, "BloodType", c("nrow", "ncol"))
# summarise() 함수 사용하기(heightMean은 summarise의 인자)
ddply(DF, "BloodType", summarise, heightMean=mean(Height))
# 산술연산 적용
ddply(DF, "BloodType", summarise, heightMean=mean(Height)*2)
# 리스트형식 다중그룹
ddply(DF, .(BloodType), summarise, heightMean=mean(Height))
ddply(DF, .(BloodType, Gender), summarise, heightMean=mean(Height))
ddply(DF, .(BloodType, Gender), summarise, height_Mean=mean(Height))
ddply(DF, .(BloodType, Gender), summarise, height_Mean=avg(Height))
# 작업디렉토리 복원
getwd()
setwd("~")
getwd()
# 작업디렉토리 확인 ####
getwd()
# 작업디렉토리 지정 ####
setwd("~/[006]_FIO")
getwd()
library(xlsx)
# Sheet 이름 지정 안함
write.xlsx(DF.XML,
file = "data2/007_outXLSX.xlsx")
library(XML)
(XMLtext <- xmlTreeParse("data/ListPrice.xml",
useInternal = TRUE))
(RootNode <- xmlRoot(XMLtext))
(Models <- xpathSApply(RootNode,
"//model",
xmlValue))
(Prices <- xpathSApply(RootNode,
"//price",
xmlValue))
(DF.XML <- data.frame(Model = Models,
Price = Prices))
library(kulife)
library(readxl)
# Sheet 이름 지정 안함
write.xlsx(DF.XML,
file = "data2/007_outXLSX.xlsx")
read_xlsx(path = "data2/007_outXLSX.xlsx",
sheet = "Sheet1",
col_names = TRUE)
# Sheet 이름 지정함
write.xlsx(PII_List,
file = "data2/007_outXLSX.xlsx",
sheetName = "PII_list",
col.names = TRUE,
row.names = FALSE,
append = TRUE)
# 윈도우즈에서 엑셀실행 후
# 복사할 내용  Ctrl+C 한 후에 진행
PII_List <- read.delim("clipboard")
# 복사된 데이터 확인(필수)
PII_List
# Sheet 이름 지정함
write.xlsx(PII_List,
file = "data2/007_outXLSX.xlsx",
sheetName = "PII_list",
col.names = TRUE,
row.names = FALSE,
append = TRUE)
read_xlsx(path = "data2/007_outXLSX.xlsx",
sheet = "PII_list",
col_names = TRUE)
# install.packages("RCurl")
# install.packages("XML")
library(RCurl)
install.packages("RCurl")
# install.packages("XML")
library(RCurl)
library(XML)
searchUrl <- "https://openapi.naver.com/v1/search/blog.xml"
Client_ID <- "QuXvRyP4NkIBzebrT_Hs"
Client_Secret <- "nuRjoOrM_H"
query <- URLencode(iconv("봄맞이","euc-kr","UTF-8"))
# 블로그 검색
# &display 최대값 100   #paste  붙이기  검색해서 보여주는 것이 100개
url <- paste(searchUrl, "?query=", query, "&display=100", sep="")
doc <- getURL(url,
httpheader = c('Content-Type' = "application/xml",
'X-Naver-Client-Id' = Client_ID,
'X-Naver-Client-Secret' = Client_Secret))
# 블로그 내용에 대한 리스트 만들기
doc2 <- htmlParse(doc, encoding="UTF-8")
text <- xpathSApply(doc2, "//item/description", xmlValue)
text
searchNrl <- "https://openapi.naver.com/v1/search/news.xml"
query <- URLencode(iconv("금리인상","euc-kr","UTF-8"))
# 뉴스 검색
# &display 최대값 100
nrl <- paste(searchNrl, "?query=", query, "&display=100", sep="")
ndoc <- getURL(nrl,
httpheader = c('Content-Type' = "application/xml",
'X-Naver-Client-Id' = Client_ID,
'X-Naver-Client-Secret' = Client_Secret))
# 뉴스 내용에 대한 리스트 만들기
ndoc2 <- htmlParse(ndoc, encoding="UTF-8")
ntext <- xpathSApply(ndoc2, "//item/description", xmlValue)
ntext
searchCrl <- "https://openapi.naver.com/v1/search/cafearticle.xml"
query <- URLencode(iconv("코뉴어","euc-kr","UTF-8"))
# 카페글 검색
# &display 최대값 100
crl <- paste(searchCrl, "?query=", query, "&display=100", sep="")
cdoc <- getURL(crl,
httpheader = c('Content-Type' = "application/xml",
'X-Naver-Client-Id' = Client_ID,
'X-Naver-Client-Secret' = Client_Secret))
# 카페글 내용에 대한 리스트 만들기
cdoc2 <- htmlParse(cdoc, encoding="UTF-8")
ctext <- xpathSApply(cdoc2, "//item/description", xmlValue)
ctext
query <- URLencode(iconv("빅데이터","euc-kr","UTF-8"))
# 카페글 검색
# &display 최대값 100
crl <- paste(searchCrl, "?query=", query, "&display=100", sep="")
cdoc <- getURL(crl,
httpheader = c('Content-Type' = "application/xml",
'X-Naver-Client-Id' = Client_ID,
'X-Naver-Client-Secret' = Client_Secret))
# 카페글 내용에 대한 리스트 만들기
cdoc2 <- htmlParse(cdoc, encoding="UTF-8")
ctext <- xpathSApply(cdoc2, "//item/description", xmlValue)
ctext
library(RCurl)
library(XML)
library(KoNLP)
library("wordcloud2")
# 팔레트 지정
library(RColorBrewer)
Client_ID <- "QuXvRyP4NkIBzebrT_Hs"
Client_Secret <- "nuRjoOrM_H"
searchUrl <- "https://openapi.naver.com/v1/search/blog.xml"
query <- URLencode(iconv("4차산업","euc-kr","UTF-8"))
url <- paste(searchUrl, "?query=", query, "&display=100", sep="")
doc <- getURL(url,
httpheader = c('Content-Type' = "application/xml",
'X-Naver-Client-Id' = Client_ID,
'X-Naver-Client-Secret' = Client_Secret))
doc
# 블로그 내용에 대한 리스트 만들기
doc2 <- htmlParse(doc, encoding="UTF-8")
doc2
text <- xpathSApply(doc2, "//item/description", xmlValue)
text
class(text)
# 단어 추출
nouns <- sapply(text,
extractNoun,
USE.NAMES = F)
library(KoNLP)
# 단어 추출
nouns <- sapply(text,
extractNoun,
USE.NAMES = F)
library(wordcloud)
# 단어 추출
nouns <- sapply(text,
extractNoun,
USE.NAMES = F)
